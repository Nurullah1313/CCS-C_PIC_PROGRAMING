CCS PCM C Compiler, Version 5.007, 61971               26-Eyl-19 12:15

               Filename:   C:\Users\NURULLAH\Desktop\ccs c örnek\LCD\lcd877a tus takýmý\main.lst

               ROM used:   878 words (11%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           25 (7%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   30A
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 0C,21
000D:  DATA E1,39
000E:  DATA 69,36
000F:  DATA 61,37
0010:  DATA 20,3A
0011:  DATA F5,39
0012:  DATA 3D,00
*
015B:  MOVF   0B,W
015C:  MOVWF  22
015D:  BCF    0B.7
015E:  BSF    03.5
015F:  BSF    03.6
0160:  BSF    0C.7
0161:  BSF    0C.0
0162:  NOP
0163:  NOP
0164:  BCF    03.5
0165:  MOVF   0C,W
0166:  ANDLW  7F
0167:  BTFSC  03.2
0168:  GOTO   1A2
0169:  BCF    03.6
016A:  MOVWF  23
016B:  BSF    03.6
016C:  MOVF   0D,W
016D:  BCF    03.6
016E:  MOVWF  24
016F:  BSF    03.6
0170:  MOVF   0F,W
0171:  BCF    03.6
0172:  MOVWF  25
0173:  MOVF   23,W
0174:  MOVWF  29
0175:  CALL   12F
0176:  MOVF   24,W
0177:  BSF    03.6
0178:  MOVWF  0D
0179:  BCF    03.6
017A:  MOVF   25,W
017B:  BSF    03.6
017C:  MOVWF  0F
017D:  BSF    03.5
017E:  BSF    0C.7
017F:  BSF    0C.0
0180:  NOP
0181:  NOP
0182:  BCF    03.5
0183:  RLF    0C,W
0184:  RLF    0E,W
0185:  ANDLW  7F
0186:  BTFSC  03.2
0187:  GOTO   1A2
0188:  BCF    03.6
0189:  MOVWF  23
018A:  BSF    03.6
018B:  MOVF   0D,W
018C:  BCF    03.6
018D:  MOVWF  24
018E:  BSF    03.6
018F:  MOVF   0F,W
0190:  BCF    03.6
0191:  MOVWF  25
0192:  MOVF   23,W
0193:  MOVWF  29
0194:  CALL   12F
0195:  MOVF   24,W
0196:  BSF    03.6
0197:  MOVWF  0D
0198:  BCF    03.6
0199:  MOVF   25,W
019A:  BSF    03.6
019B:  MOVWF  0F
019C:  INCF   0D,F
019D:  BTFSC  03.2
019E:  INCF   0F,F
019F:  BCF    03.6
01A0:  GOTO   15E
01A1:  BSF    03.6
01A2:  BCF    03.6
01A3:  BTFSC  22.7
01A4:  BSF    0B.7
01A5:  BCF    0A.3
01A6:  BCF    0A.4
01A7:  GOTO   350 (RETURN)
*
029E:  MOVF   2A,W
029F:  CLRF   78
02A0:  SUBWF  29,W
02A1:  BTFSC  03.0
02A2:  GOTO   2A6
02A3:  MOVF   29,W
02A4:  MOVWF  77
02A5:  GOTO   2B2
02A6:  CLRF   77
02A7:  MOVLW  08
02A8:  MOVWF  2B
02A9:  RLF    29,F
02AA:  RLF    77,F
02AB:  MOVF   2A,W
02AC:  SUBWF  77,W
02AD:  BTFSC  03.0
02AE:  MOVWF  77
02AF:  RLF    78,F
02B0:  DECFSZ 2B,F
02B1:  GOTO   2A9
02B2:  RETURN
02B3:  MOVLW  20
02B4:  BTFSS  24.4
02B5:  MOVLW  30
02B6:  MOVWF  25
02B7:  MOVF   23,W
02B8:  MOVWF  77
02B9:  BTFSS  23.7
02BA:  GOTO   2C3
02BB:  COMF   77,F
02BC:  INCF   77,F
02BD:  MOVF   77,W
02BE:  MOVWF  23
02BF:  MOVLW  2D
02C0:  MOVWF  25
02C1:  BSF    24.7
02C2:  BSF    24.0
02C3:  MOVF   23,W
02C4:  MOVWF  29
02C5:  MOVLW  64
02C6:  MOVWF  2A
02C7:  CALL   29E
02C8:  MOVF   77,W
02C9:  MOVWF  23
02CA:  MOVLW  30
02CB:  ADDWF  78,W
02CC:  MOVWF  26
02CD:  MOVF   23,W
02CE:  MOVWF  29
02CF:  MOVLW  0A
02D0:  MOVWF  2A
02D1:  CALL   29E
02D2:  MOVLW  30
02D3:  ADDWF  77,W
02D4:  MOVWF  28
02D5:  MOVLW  30
02D6:  ADDWF  78,W
02D7:  MOVWF  27
02D8:  MOVF   25,W
02D9:  MOVWF  77
02DA:  MOVLW  30
02DB:  SUBWF  26,W
02DC:  BTFSC  03.2
02DD:  GOTO   2E2
02DE:  BSF    24.1
02DF:  BTFSC  24.7
02E0:  BSF    24.2
02E1:  GOTO   2F6
02E2:  MOVF   25,W
02E3:  MOVWF  26
02E4:  MOVLW  20
02E5:  MOVWF  25
02E6:  MOVLW  30
02E7:  SUBWF  27,W
02E8:  BTFSC  03.2
02E9:  GOTO   2EE
02EA:  BSF    24.0
02EB:  BTFSC  24.7
02EC:  BSF    24.1
02ED:  GOTO   2F6
02EE:  BTFSS  03.2
02EF:  BSF    24.0
02F0:  BTFSS  03.2
02F1:  GOTO   2F6
02F2:  MOVF   26,W
02F3:  MOVWF  27
02F4:  MOVLW  20
02F5:  MOVWF  26
02F6:  BTFSC  24.2
02F7:  GOTO   2FD
02F8:  BTFSC  24.1
02F9:  GOTO   300
02FA:  BTFSC  24.0
02FB:  GOTO   303
02FC:  GOTO   306
02FD:  MOVF   25,W
02FE:  MOVWF  29
02FF:  CALL   12F
0300:  MOVF   26,W
0301:  MOVWF  29
0302:  CALL   12F
0303:  MOVF   27,W
0304:  MOVWF  29
0305:  CALL   12F
0306:  MOVF   28,W
0307:  MOVWF  29
0308:  CALL   12F
0309:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=8000000) 
*
0013:  MOVLW  2A
0014:  MOVWF  04
0015:  BCF    03.7
0016:  MOVF   00,W
0017:  BTFSC  03.2
0018:  GOTO   026
0019:  MOVLW  02
001A:  MOVWF  78
001B:  CLRF   77
001C:  DECFSZ 77,F
001D:  GOTO   01C
001E:  DECFSZ 78,F
001F:  GOTO   01B
0020:  MOVLW  97
0021:  MOVWF  77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 00,F
0025:  GOTO   019
0026:  RETURN
....................  
....................  
.................... #define LCD_ENABLE_PIN PIN_B2 
.................... #define LCD_RS_PIN PIN_B0 
.................... #define LCD_RW_PIN PIN_B1 
.................... #define LCD_DATA4 PIN_B3 
.................... #define LCD_DATA5 PIN_B4 
.................... #define LCD_DATA6 PIN_B5 
.................... #define LCD_DATA7 PIN_B6 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
008C:  BSF    06.3
....................    output_float(LCD_DATA5); 
008D:  BSF    06.4
....................    output_float(LCD_DATA6); 
008E:  BSF    06.5
....................    output_float(LCD_DATA7); 
008F:  BSF    06.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0090:  BCF    03.5
0091:  BSF    06.1
0092:  BSF    03.5
0093:  BCF    06.1
....................    delay_cycles(1); 
0094:  NOP
....................    lcd_output_enable(1); 
0095:  BCF    03.5
0096:  BSF    06.2
0097:  BSF    03.5
0098:  BCF    06.2
....................    delay_cycles(1); 
0099:  NOP
....................    high = lcd_read_nibble(); 
009A:  BCF    03.5
009B:  CALL   053
009C:  MOVF   78,W
009D:  MOVWF  31
....................        
....................    lcd_output_enable(0); 
009E:  BCF    06.2
009F:  BSF    03.5
00A0:  BCF    06.2
....................    delay_cycles(1); 
00A1:  NOP
....................    lcd_output_enable(1); 
00A2:  BCF    03.5
00A3:  BSF    06.2
00A4:  BSF    03.5
00A5:  BCF    06.2
....................    delay_us(1); 
00A6:  GOTO   0A7
....................    low = lcd_read_nibble(); 
00A7:  BCF    03.5
00A8:  CALL   053
00A9:  MOVF   78,W
00AA:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
00AB:  BCF    06.2
00AC:  BSF    03.5
00AD:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00AE:  BCF    06.3
....................    output_drive(LCD_DATA5); 
00AF:  BCF    06.4
....................    output_drive(LCD_DATA6); 
00B0:  BCF    06.5
....................    output_drive(LCD_DATA7); 
00B1:  BCF    06.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B2:  BCF    03.5
00B3:  SWAPF  31,W
00B4:  MOVWF  77
00B5:  MOVLW  F0
00B6:  ANDWF  77,F
00B7:  MOVF   77,W
00B8:  IORWF  30,W
00B9:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0053:  CLRF   32
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0054:  BSF    03.5
0055:  BSF    06.3
0056:  MOVLW  00
0057:  BCF    03.5
0058:  BTFSC  06.3
0059:  MOVLW  01
005A:  IORWF  32,F
....................    n |= input(LCD_DATA5) << 1; 
005B:  BSF    03.5
005C:  BSF    06.4
005D:  MOVLW  00
005E:  BCF    03.5
005F:  BTFSC  06.4
0060:  MOVLW  01
0061:  MOVWF  77
0062:  BCF    03.0
0063:  RLF    77,F
0064:  MOVF   77,W
0065:  IORWF  32,F
....................    n |= input(LCD_DATA6) << 2; 
0066:  BSF    03.5
0067:  BSF    06.5
0068:  MOVLW  00
0069:  BCF    03.5
006A:  BTFSC  06.5
006B:  MOVLW  01
006C:  MOVWF  77
006D:  RLF    77,F
006E:  RLF    77,F
006F:  MOVLW  FC
0070:  ANDWF  77,F
0071:  MOVF   77,W
0072:  IORWF  32,F
....................    n |= input(LCD_DATA7) << 3; 
0073:  BSF    03.5
0074:  BSF    06.6
0075:  MOVLW  00
0076:  BCF    03.5
0077:  BTFSC  06.6
0078:  MOVLW  01
0079:  MOVWF  77
007A:  RLF    77,F
007B:  RLF    77,F
007C:  RLF    77,F
007D:  MOVLW  F8
007E:  ANDWF  77,F
007F:  MOVF   77,W
0080:  IORWF  32,F
....................     
....................    return(n); 
0081:  MOVF   32,W
0082:  MOVWF  78
....................   #else 
0083:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0027:  BTFSC  31.0
0028:  GOTO   02B
0029:  BCF    06.3
002A:  GOTO   02C
002B:  BSF    06.3
002C:  BSF    03.5
002D:  BCF    06.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
002E:  BCF    03.5
002F:  BTFSC  31.1
0030:  GOTO   033
0031:  BCF    06.4
0032:  GOTO   034
0033:  BSF    06.4
0034:  BSF    03.5
0035:  BCF    06.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0036:  BCF    03.5
0037:  BTFSC  31.2
0038:  GOTO   03B
0039:  BCF    06.5
003A:  GOTO   03C
003B:  BSF    06.5
003C:  BSF    03.5
003D:  BCF    06.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
003E:  BCF    03.5
003F:  BTFSC  31.3
0040:  GOTO   043
0041:  BCF    06.6
0042:  GOTO   044
0043:  BSF    06.6
0044:  BSF    03.5
0045:  BCF    06.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0046:  NOP
....................    lcd_output_enable(1); 
0047:  BCF    03.5
0048:  BSF    06.2
0049:  BSF    03.5
004A:  BCF    06.2
....................    delay_us(2); 
004B:  GOTO   04C
004C:  GOTO   04D
....................    lcd_output_enable(0); 
004D:  BCF    03.5
004E:  BCF    06.2
004F:  BSF    03.5
0050:  BCF    06.2
0051:  BCF    03.5
0052:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0084:  BSF    03.5
0085:  BCF    06.2
....................    lcd_rs_tris(); 
0086:  BCF    06.0
....................    lcd_rw_tris(); 
0087:  BCF    06.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0088:  BCF    03.5
0089:  BCF    06.0
008A:  BSF    03.5
008B:  BCF    06.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00BA:  MOVF   78,W
00BB:  MOVWF  30
00BC:  BTFSS  30.7
00BD:  GOTO   0C0
00BE:  BSF    03.5
00BF:  GOTO   08C
....................    lcd_output_rs(address); 
00C0:  MOVF   2E,F
00C1:  BTFSS  03.2
00C2:  GOTO   0C5
00C3:  BCF    06.0
00C4:  GOTO   0C6
00C5:  BSF    06.0
00C6:  BSF    03.5
00C7:  BCF    06.0
....................    delay_cycles(1); 
00C8:  NOP
....................    lcd_output_rw(0); 
00C9:  BCF    03.5
00CA:  BCF    06.1
00CB:  BSF    03.5
00CC:  BCF    06.1
....................    delay_cycles(1); 
00CD:  NOP
....................    lcd_output_enable(0); 
00CE:  BCF    03.5
00CF:  BCF    06.2
00D0:  BSF    03.5
00D1:  BCF    06.2
....................    lcd_send_nibble(n >> 4); 
00D2:  BCF    03.5
00D3:  SWAPF  2F,W
00D4:  MOVWF  30
00D5:  MOVLW  0F
00D6:  ANDWF  30,F
00D7:  MOVF   30,W
00D8:  MOVWF  31
00D9:  CALL   027
....................    lcd_send_nibble(n & 0xf); 
00DA:  MOVF   2F,W
00DB:  ANDLW  0F
00DC:  MOVWF  30
00DD:  MOVWF  31
00DE:  CALL   027
00DF:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00E0:  BSF    03.5
00E1:  BCF    06.3
....................    output_drive(LCD_DATA5); 
00E2:  BCF    06.4
....................    output_drive(LCD_DATA6); 
00E3:  BCF    06.5
....................    output_drive(LCD_DATA7); 
00E4:  BCF    06.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00E5:  BCF    06.2
....................    lcd_rs_tris(); 
00E6:  BCF    06.0
....................    lcd_rw_tris(); 
00E7:  BCF    06.1
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00E8:  BCF    03.5
00E9:  BCF    06.0
00EA:  BSF    03.5
00EB:  BCF    06.0
....................    lcd_output_rw(0); 
00EC:  BCF    03.5
00ED:  BCF    06.1
00EE:  BSF    03.5
00EF:  BCF    06.1
....................    lcd_output_enable(0); 
00F0:  BCF    03.5
00F1:  BCF    06.2
00F2:  BSF    03.5
00F3:  BCF    06.2
....................      
....................    delay_ms(15); 
00F4:  MOVLW  0F
00F5:  BCF    03.5
00F6:  MOVWF  2A
00F7:  CALL   013
....................    for(i=1;i<=3;++i) 
00F8:  MOVLW  01
00F9:  MOVWF  22
00FA:  MOVF   22,W
00FB:  SUBLW  03
00FC:  BTFSS  03.0
00FD:  GOTO   106
....................    { 
....................        lcd_send_nibble(3); 
00FE:  MOVLW  03
00FF:  MOVWF  31
0100:  CALL   027
....................        delay_ms(5); 
0101:  MOVLW  05
0102:  MOVWF  2A
0103:  CALL   013
0104:  INCF   22,F
0105:  GOTO   0FA
....................    } 
....................     
....................    lcd_send_nibble(2); 
0106:  MOVLW  02
0107:  MOVWF  31
0108:  CALL   027
....................    delay_ms(5); 
0109:  MOVLW  05
010A:  MOVWF  2A
010B:  CALL   013
....................    for(i=0;i<=3;++i) 
010C:  CLRF   22
010D:  MOVF   22,W
010E:  SUBLW  03
010F:  BTFSS  03.0
0110:  GOTO   11A
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0111:  MOVF   22,W
0112:  CALL   004
0113:  MOVWF  23
0114:  CLRF   2E
0115:  MOVF   23,W
0116:  MOVWF  2F
0117:  CALL   084
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0118:  INCF   22,F
0119:  GOTO   10D
011A:  BCF    0A.3
011B:  BCF    0A.4
011C:  GOTO   349 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
011D:  DECFSZ 2B,W
011E:  GOTO   120
011F:  GOTO   123
....................       address=LCD_LINE_TWO; 
0120:  MOVLW  40
0121:  MOVWF  2C
0122:  GOTO   124
....................    else 
....................       address=0; 
0123:  CLRF   2C
....................       
....................    address+=x-1; 
0124:  MOVLW  01
0125:  SUBWF  2A,W
0126:  ADDWF  2C,F
....................    lcd_send_byte(0,0x80|address); 
0127:  MOVF   2C,W
0128:  IORLW  80
0129:  MOVWF  2D
012A:  CLRF   2E
012B:  MOVF   2D,W
012C:  MOVWF  2F
012D:  CALL   084
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
012E:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
012F:  MOVF   29,W
0130:  XORLW  07
0131:  BTFSC  03.2
0132:  GOTO   13D
0133:  XORLW  0B
0134:  BTFSC  03.2
0135:  GOTO   142
0136:  XORLW  06
0137:  BTFSC  03.2
0138:  GOTO   14A
0139:  XORLW  02
013A:  BTFSC  03.2
013B:  GOTO   150
013C:  GOTO   155
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
013D:  MOVLW  01
013E:  MOVWF  2A
013F:  MOVWF  2B
0140:  CALL   11D
0141:  GOTO   15A
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0142:  CLRF   2E
0143:  MOVLW  01
0144:  MOVWF  2F
0145:  CALL   084
....................                      delay_ms(2); 
0146:  MOVLW  02
0147:  MOVWF  2A
0148:  CALL   013
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0149:  GOTO   15A
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
014A:  MOVLW  01
014B:  MOVWF  2A
014C:  MOVLW  02
014D:  MOVWF  2B
014E:  CALL   11D
014F:  GOTO   15A
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0150:  CLRF   2E
0151:  MOVLW  10
0152:  MOVWF  2F
0153:  CALL   084
0154:  GOTO   15A
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0155:  MOVLW  01
0156:  MOVWF  2E
0157:  MOVF   29,W
0158:  MOVWF  2F
0159:  CALL   084
....................      #endif 
....................    } 
015A:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #define  LCD_DATA_PORT  getenv("SFR:PORTB") 
....................  
.................... //keypad satýr ve sütunlarý pinlerle eþleþtriliyor 
.................... #define sut1 pin_c0 
.................... #define sut2 pin_c1 
.................... #define sut3 pin_c2 
.................... #define sut4 pin_c3 
....................  
.................... #define sat1 pin_c4 
.................... #define sat2 pin_c5 
.................... #define sat3 pin_c6 
.................... #define sat4 pin_c7 
....................  
.................... char tus=0; //ekrana yazacaðamýz deðiþken 
....................  
.................... char oku()//keypad'i okumak için yaptýðýmýz bir fonkksiyon 
.................... {   
....................    output_d(0x00);//keypad'in pinlerini sýfýrlýyoruz 
*
01A8:  BSF    03.5
01A9:  CLRF   08
01AA:  BCF    03.5
01AB:  CLRF   08
....................     
....................    //satýr tarama iþlemleri yapýyoruyz 
....................    output_high(sat1);//1. satýrý lojik 1 yapýyoruz 
01AC:  BCF    21.4
01AD:  MOVF   21,W
01AE:  BSF    03.5
01AF:  MOVWF  07
01B0:  BCF    03.5
01B1:  BSF    07.4
....................       if(input(sut1)){delay_ms(20);tus=1;}//1. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
01B2:  BSF    21.0
01B3:  MOVF   21,W
01B4:  BSF    03.5
01B5:  MOVWF  07
01B6:  BCF    03.5
01B7:  BTFSS  07.0
01B8:  GOTO   1BE
01B9:  MOVLW  14
01BA:  MOVWF  2A
01BB:  CALL   013
01BC:  MOVLW  01
01BD:  MOVWF  20
....................       if(input(sut2)){delay_ms(20);tus=2;}//2. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
01BE:  BSF    21.1
01BF:  MOVF   21,W
01C0:  BSF    03.5
01C1:  MOVWF  07
01C2:  BCF    03.5
01C3:  BTFSS  07.1
01C4:  GOTO   1CA
01C5:  MOVLW  14
01C6:  MOVWF  2A
01C7:  CALL   013
01C8:  MOVLW  02
01C9:  MOVWF  20
....................       if(input(sut3)){delay_ms(20);tus=3;}//3. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
01CA:  BSF    21.2
01CB:  MOVF   21,W
01CC:  BSF    03.5
01CD:  MOVWF  07
01CE:  BCF    03.5
01CF:  BTFSS  07.2
01D0:  GOTO   1D6
01D1:  MOVLW  14
01D2:  MOVWF  2A
01D3:  CALL   013
01D4:  MOVLW  03
01D5:  MOVWF  20
....................       if(input(sut4)){delay_ms(20);tus=0xA;}//4. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
01D6:  BSF    21.3
01D7:  MOVF   21,W
01D8:  BSF    03.5
01D9:  MOVWF  07
01DA:  BCF    03.5
01DB:  BTFSS  07.3
01DC:  GOTO   1E2
01DD:  MOVLW  14
01DE:  MOVWF  2A
01DF:  CALL   013
01E0:  MOVLW  0A
01E1:  MOVWF  20
....................    output_low (sat1);//1. satýrý lojik 0 yapýyoruz 
01E2:  BCF    21.4
01E3:  MOVF   21,W
01E4:  BSF    03.5
01E5:  MOVWF  07
01E6:  BCF    03.5
01E7:  BCF    07.4
....................  
....................    output_high(sat2);//2. satýrý lojik 1 yapýyoruz 
01E8:  BCF    21.5
01E9:  MOVF   21,W
01EA:  BSF    03.5
01EB:  MOVWF  07
01EC:  BCF    03.5
01ED:  BSF    07.5
....................       if(input(sut1)){delay_ms(20);tus=4;}//1. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
01EE:  BSF    21.0
01EF:  MOVF   21,W
01F0:  BSF    03.5
01F1:  MOVWF  07
01F2:  BCF    03.5
01F3:  BTFSS  07.0
01F4:  GOTO   1FA
01F5:  MOVLW  14
01F6:  MOVWF  2A
01F7:  CALL   013
01F8:  MOVLW  04
01F9:  MOVWF  20
....................       if(input(sut2)){delay_ms(20);tus=5;}//2. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
01FA:  BSF    21.1
01FB:  MOVF   21,W
01FC:  BSF    03.5
01FD:  MOVWF  07
01FE:  BCF    03.5
01FF:  BTFSS  07.1
0200:  GOTO   206
0201:  MOVLW  14
0202:  MOVWF  2A
0203:  CALL   013
0204:  MOVLW  05
0205:  MOVWF  20
....................       if(input(sut3)){delay_ms(20);tus=6;}//3. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
0206:  BSF    21.2
0207:  MOVF   21,W
0208:  BSF    03.5
0209:  MOVWF  07
020A:  BCF    03.5
020B:  BTFSS  07.2
020C:  GOTO   212
020D:  MOVLW  14
020E:  MOVWF  2A
020F:  CALL   013
0210:  MOVLW  06
0211:  MOVWF  20
....................       if(input(sut4)){delay_ms(20);tus=0XB;}//4. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
0212:  BSF    21.3
0213:  MOVF   21,W
0214:  BSF    03.5
0215:  MOVWF  07
0216:  BCF    03.5
0217:  BTFSS  07.3
0218:  GOTO   21E
0219:  MOVLW  14
021A:  MOVWF  2A
021B:  CALL   013
021C:  MOVLW  0B
021D:  MOVWF  20
....................    output_low (sat2);//2. satýrý lojik 0 yapýyoruz 
021E:  BCF    21.5
021F:  MOVF   21,W
0220:  BSF    03.5
0221:  MOVWF  07
0222:  BCF    03.5
0223:  BCF    07.5
....................     
....................    output_high(sat3);//3. satýrý lojik 1 yapýyoruz 
0224:  BCF    21.6
0225:  MOVF   21,W
0226:  BSF    03.5
0227:  MOVWF  07
0228:  BCF    03.5
0229:  BSF    07.6
....................       if(input(sut1)){delay_ms(20);tus=7;}//1. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
022A:  BSF    21.0
022B:  MOVF   21,W
022C:  BSF    03.5
022D:  MOVWF  07
022E:  BCF    03.5
022F:  BTFSS  07.0
0230:  GOTO   236
0231:  MOVLW  14
0232:  MOVWF  2A
0233:  CALL   013
0234:  MOVLW  07
0235:  MOVWF  20
....................       if(input(sut2)){delay_ms(20);tus=8;}//2. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
0236:  BSF    21.1
0237:  MOVF   21,W
0238:  BSF    03.5
0239:  MOVWF  07
023A:  BCF    03.5
023B:  BTFSS  07.1
023C:  GOTO   242
023D:  MOVLW  14
023E:  MOVWF  2A
023F:  CALL   013
0240:  MOVLW  08
0241:  MOVWF  20
....................       if(input(sut3)){delay_ms(20);tus=9;}//3. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
0242:  BSF    21.2
0243:  MOVF   21,W
0244:  BSF    03.5
0245:  MOVWF  07
0246:  BCF    03.5
0247:  BTFSS  07.2
0248:  GOTO   24E
0249:  MOVLW  14
024A:  MOVWF  2A
024B:  CALL   013
024C:  MOVLW  09
024D:  MOVWF  20
....................       if(input(sut4)){delay_ms(20);tus=0XC;}//4. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
024E:  BSF    21.3
024F:  MOVF   21,W
0250:  BSF    03.5
0251:  MOVWF  07
0252:  BCF    03.5
0253:  BTFSS  07.3
0254:  GOTO   25A
0255:  MOVLW  14
0256:  MOVWF  2A
0257:  CALL   013
0258:  MOVLW  0C
0259:  MOVWF  20
....................    output_low (sat3);//3. satýrý lojik 0 yapýyoruz 
025A:  BCF    21.6
025B:  MOVF   21,W
025C:  BSF    03.5
025D:  MOVWF  07
025E:  BCF    03.5
025F:  BCF    07.6
....................     
....................    output_high(sat4);//4. satýrý lojik 1 yapýyoruz 
0260:  BCF    21.7
0261:  MOVF   21,W
0262:  BSF    03.5
0263:  MOVWF  07
0264:  BCF    03.5
0265:  BSF    07.7
....................       if(input(sut1)){delay_ms(20);tus=0XE;}//1. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
0266:  BSF    21.0
0267:  MOVF   21,W
0268:  BSF    03.5
0269:  MOVWF  07
026A:  BCF    03.5
026B:  BTFSS  07.0
026C:  GOTO   272
026D:  MOVLW  14
026E:  MOVWF  2A
026F:  CALL   013
0270:  MOVLW  0E
0271:  MOVWF  20
....................       if(input(sut2)){delay_ms(20);tus=0;}//2. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
0272:  BSF    21.1
0273:  MOVF   21,W
0274:  BSF    03.5
0275:  MOVWF  07
0276:  BCF    03.5
0277:  BTFSS  07.1
0278:  GOTO   27D
0279:  MOVLW  14
027A:  MOVWF  2A
027B:  CALL   013
027C:  CLRF   20
....................       if(input(sut3)){delay_ms(20);tus=0XF;}//3. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
027D:  BSF    21.2
027E:  MOVF   21,W
027F:  BSF    03.5
0280:  MOVWF  07
0281:  BCF    03.5
0282:  BTFSS  07.2
0283:  GOTO   289
0284:  MOVLW  14
0285:  MOVWF  2A
0286:  CALL   013
0287:  MOVLW  0F
0288:  MOVWF  20
....................       if(input(sut4)){delay_ms(20);tus=0XD;}//4. sütun'u okýuyoruz gereken deðer'i tus deðiþkenine atýyoruz 
0289:  BSF    21.3
028A:  MOVF   21,W
028B:  BSF    03.5
028C:  MOVWF  07
028D:  BCF    03.5
028E:  BTFSS  07.3
028F:  GOTO   295
0290:  MOVLW  14
0291:  MOVWF  2A
0292:  CALL   013
0293:  MOVLW  0D
0294:  MOVWF  20
....................    output_low (sat4);//4. satýrý lojik 0 yapýyoruz 
0295:  BCF    21.7
0296:  MOVF   21,W
0297:  BSF    03.5
0298:  MOVWF  07
0299:  BCF    03.5
029A:  BCF    07.7
....................     
....................    return tus;//tus deðiþkenini ana fonksiyona gönderiyoruz 
029B:  MOVF   20,W
029C:  MOVWF  78
029D:  RETURN
.................... } 
....................  
.................... void main()//ana fonksiyon 
*
030A:  CLRF   20
030B:  MOVLW  FF
030C:  MOVWF  21
030D:  BSF    03.5
030E:  BSF    1F.0
030F:  BSF    1F.1
0310:  BSF    1F.2
0311:  BCF    1F.3
0312:  MOVLW  07
0313:  MOVWF  1C
0314:  BCF    03.7
0315:  MOVLW  1F
0316:  ANDWF  03,F
.................... { 
....................    setup_psp(psp_disabled); 
0317:  BCF    09.4
....................    setup_timer_1(t1_disabled); 
0318:  BCF    03.5
0319:  CLRF   10
....................    setup_timer_2(t2_disabled,0,1); 
031A:  MOVLW  00
031B:  MOVWF  78
031C:  MOVWF  12
031D:  MOVLW  00
031E:  BSF    03.5
031F:  MOVWF  12
....................    setup_adc_ports(no_analogs); 
0320:  BSF    1F.0
0321:  BSF    1F.1
0322:  BSF    1F.2
0323:  BCF    1F.3
....................    setup_adc(adc_off); 
0324:  BCF    03.5
0325:  BCF    1F.0
....................    setup_ccp1(ccp_off); 
0326:  MOVLW  F0
0327:  ANDWF  17,F
....................    setup_ccp2(ccp_off); 
0328:  ANDWF  1D,F
....................    setup_comparator(nc_nc_nc_nc); 
0329:  MOVLW  07
032A:  BSF    03.5
032B:  MOVWF  1C
032C:  MOVF   05,W
032D:  MOVWF  05
032E:  MOVLW  06
032F:  MOVWF  77
0330:  DECFSZ 77,F
0331:  GOTO   330
0332:  NOP
0333:  MOVF   1C,W
0334:  BCF    03.5
0335:  BCF    0D.6
....................    setup_vref(false); 
0336:  BSF    03.5
0337:  CLRF   1D
....................     
....................     
....................    set_tris_b(0x00);//b portunu çýkýþ portu olarak ayarlýyoruz 
0338:  MOVLW  00
0339:  MOVWF  06
....................    set_tris_c(0xFF);//c portunu giriþ portu olarak ayarlýyoruz 
033A:  MOVLW  FF
033B:  MOVWF  07
033C:  BCF    03.5
033D:  MOVWF  21
....................    output_b(0x00);//b portunu sýfýrlýyoruz 
033E:  BSF    03.5
033F:  CLRF   06
0340:  BCF    03.5
0341:  CLRF   06
....................    output_c(0x00);//c portunu sýfýrlýyoruz 
0342:  MOVLW  00
0343:  MOVWF  21
0344:  BSF    03.5
0345:  CLRF   07
0346:  BCF    03.5
0347:  CLRF   07
....................     
....................    lcd_init();//lcd'yi açýyoruz 
0348:  GOTO   0E0
....................    printf(lcd_putc,"\fBasilan tus=");//lcd ekranýný tamizleyip "Basýlan tus="yazýyoruz Döngüye koymadýk çünkü programý yormasýný istemiyoruz 
0349:  MOVLW  0C
034A:  BSF    03.6
034B:  MOVWF  0D
034C:  MOVLW  00
034D:  MOVWF  0F
034E:  BCF    03.6
034F:  GOTO   15B
....................    while(TRUE)//döngü 
....................    { 
....................     lcd_gotoxy(13,1);//kursor'u 13.satýr 1. sutuna sabitleyip ardan baþlamasýný saðlýyoruz 
0350:  MOVLW  0D
0351:  MOVWF  2A
0352:  MOVLW  01
0353:  MOVWF  2B
0354:  CALL   11D
....................     if(oku()>9)//tus deðiþkeni 9 dan büyükse ekrana aþþaðýdaki þekilde yaz 
0355:  CALL   1A8
0356:  MOVF   78,W
0357:  SUBLW  09
0358:  BTFSC  03.0
0359:  GOTO   362
....................      printf(lcd_putc,"%d",oku()); 
035A:  CALL   1A8
035B:  MOVF   78,W
035C:  MOVWF  22
035D:  MOVWF  23
035E:  MOVLW  18
035F:  MOVWF  24
0360:  CALL   2B3
0361:  GOTO   36C
....................     else//tus deðiþkeni 9 dan büyük deðilse ekrana aþþaðýdaki þekilde yaz 
....................      printf(lcd_putc,"%d ",oku());   
0362:  CALL   1A8
0363:  MOVF   78,W
0364:  MOVWF  22
0365:  MOVWF  23
0366:  MOVLW  18
0367:  MOVWF  24
0368:  CALL   2B3
0369:  MOVLW  20
036A:  MOVWF  29
036B:  CALL   12F
036C:  GOTO   350
....................    } 
....................  
.................... } 
....................  
036D:  SLEEP
.................... //dikkat edilirse else kýsmýnda "%d " yazýlan komut þekkildeki gibi týrnak içine fazladan bir boþluk eklenmiþtir 9 dan büyükse boþluk atýlmaz çünkü 
.................... //9 dan büyük olunca 2 basamaklý olucaktýr eðer o boþluðu koymasaydýk örneðin ekrana 15 yazdýktan sonra 2'ye basýlýnca ekrana 25 yazardý 

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
