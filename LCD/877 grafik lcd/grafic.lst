CCS PCM C Compiler, Version 5.007, 61971               22-Tem-19 15:40

               Filename:   C:\Users\NURULLAH\Desktop\ccs c örnek\LCD\877 grafik lcd\grafic.lst

               ROM used:   2325 words (28%)
                           Largest free fragment is 2048
               RAM used:   27 (7%) at main() level
                           63 (17%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
.................... #include <grafic.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDLW  0B
0008:  BTFSC  03.0
0009:  INCF   0A,F
000A:  MOVWF  02
000B:  RETLW  00
000C:  RETLW  00
000D:  RETLW  00
000E:  RETLW  00
000F:  RETLW  00
0010:  RETLW  00
0011:  RETLW  00
0012:  RETLW  5F
0013:  RETLW  00
0014:  RETLW  00
0015:  RETLW  00
0016:  RETLW  03
0017:  RETLW  00
0018:  RETLW  03
0019:  RETLW  00
001A:  RETLW  14
001B:  RETLW  3E
001C:  RETLW  14
001D:  RETLW  3E
001E:  RETLW  14
001F:  RETLW  24
0020:  RETLW  2A
0021:  RETLW  7F
0022:  RETLW  2A
0023:  RETLW  12
0024:  RETLW  43
0025:  RETLW  33
0026:  RETLW  08
0027:  RETLW  66
0028:  RETLW  61
0029:  RETLW  36
002A:  RETLW  49
002B:  RETLW  55
002C:  RETLW  22
002D:  RETLW  50
002E:  RETLW  00
002F:  RETLW  05
0030:  RETLW  03
0031:  RETLW  00
0032:  RETLW  00
0033:  RETLW  00
0034:  RETLW  1C
0035:  RETLW  22
0036:  RETLW  41
0037:  RETLW  00
0038:  RETLW  00
0039:  RETLW  41
003A:  RETLW  22
003B:  RETLW  1C
003C:  RETLW  00
003D:  RETLW  14
003E:  RETLW  08
003F:  RETLW  3E
0040:  RETLW  08
0041:  RETLW  14
0042:  RETLW  08
0043:  RETLW  08
0044:  RETLW  3E
0045:  RETLW  08
0046:  RETLW  08
0047:  RETLW  00
0048:  RETLW  50
0049:  RETLW  30
004A:  RETLW  00
004B:  RETLW  00
004C:  RETLW  08
004D:  RETLW  08
004E:  RETLW  08
004F:  RETLW  08
0050:  RETLW  08
0051:  RETLW  00
0052:  RETLW  60
0053:  RETLW  60
0054:  RETLW  00
0055:  RETLW  00
0056:  RETLW  20
0057:  RETLW  10
0058:  RETLW  08
0059:  RETLW  04
005A:  RETLW  02
005B:  RETLW  3E
005C:  RETLW  51
005D:  RETLW  49
005E:  RETLW  45
005F:  RETLW  3E
0060:  RETLW  00
0061:  RETLW  04
0062:  RETLW  02
0063:  RETLW  7F
0064:  RETLW  00
0065:  RETLW  42
0066:  RETLW  61
0067:  RETLW  51
0068:  RETLW  49
0069:  RETLW  46
006A:  RETLW  22
006B:  RETLW  41
006C:  RETLW  49
006D:  RETLW  49
006E:  RETLW  36
006F:  RETLW  18
0070:  RETLW  14
0071:  RETLW  12
0072:  RETLW  7F
0073:  RETLW  10
0074:  RETLW  27
0075:  RETLW  45
0076:  RETLW  45
0077:  RETLW  45
0078:  RETLW  39
0079:  RETLW  3E
007A:  RETLW  49
007B:  RETLW  49
007C:  RETLW  49
007D:  RETLW  32
007E:  RETLW  01
007F:  RETLW  01
0080:  RETLW  71
0081:  RETLW  09
0082:  RETLW  07
0083:  RETLW  36
0084:  RETLW  49
0085:  RETLW  49
0086:  RETLW  49
0087:  RETLW  36
0088:  RETLW  26
0089:  RETLW  49
008A:  RETLW  49
008B:  RETLW  49
008C:  RETLW  3E
008D:  RETLW  00
008E:  RETLW  36
008F:  RETLW  36
0090:  RETLW  00
0091:  RETLW  00
0092:  RETLW  00
0093:  RETLW  56
0094:  RETLW  36
0095:  RETLW  00
0096:  RETLW  00
0097:  RETLW  08
0098:  RETLW  14
0099:  RETLW  22
009A:  RETLW  41
009B:  RETLW  00
009C:  RETLW  14
009D:  RETLW  14
009E:  RETLW  14
009F:  RETLW  14
00A0:  RETLW  14
00A1:  RETLW  00
00A2:  RETLW  41
00A3:  RETLW  22
00A4:  RETLW  14
00A5:  RETLW  08
00A6:  RETLW  02
00A7:  RETLW  01
00A8:  RETLW  51
00A9:  RETLW  09
00AA:  RETLW  06
00AB:  RETLW  3E
00AC:  RETLW  41
00AD:  RETLW  59
00AE:  RETLW  55
00AF:  RETLW  5E
00B0:  RETLW  7E
00B1:  RETLW  09
00B2:  RETLW  09
00B3:  RETLW  09
00B4:  RETLW  7E
00B5:  RETLW  7F
00B6:  RETLW  49
00B7:  RETLW  49
00B8:  RETLW  49
00B9:  RETLW  36
00BA:  RETLW  3E
00BB:  RETLW  41
00BC:  RETLW  41
00BD:  RETLW  41
00BE:  RETLW  22
00BF:  RETLW  7F
00C0:  RETLW  41
00C1:  RETLW  41
00C2:  RETLW  41
00C3:  RETLW  3E
00C4:  RETLW  7F
00C5:  RETLW  49
00C6:  RETLW  49
00C7:  RETLW  49
00C8:  RETLW  41
00C9:  RETLW  7F
00CA:  RETLW  09
00CB:  RETLW  09
00CC:  RETLW  09
00CD:  RETLW  01
00CE:  RETLW  3E
00CF:  RETLW  41
00D0:  RETLW  41
00D1:  RETLW  49
00D2:  RETLW  3A
00D3:  RETLW  7F
00D4:  RETLW  08
00D5:  RETLW  08
00D6:  RETLW  08
00D7:  RETLW  7F
00D8:  RETLW  00
00D9:  RETLW  41
00DA:  RETLW  7F
00DB:  RETLW  41
00DC:  RETLW  00
00DD:  RETLW  30
00DE:  RETLW  40
00DF:  RETLW  40
00E0:  RETLW  40
00E1:  RETLW  3F
00E2:  RETLW  7F
00E3:  RETLW  08
00E4:  RETLW  14
00E5:  RETLW  22
00E6:  RETLW  41
00E7:  RETLW  7F
00E8:  RETLW  40
00E9:  RETLW  40
00EA:  RETLW  40
00EB:  RETLW  40
00EC:  RETLW  7F
00ED:  RETLW  02
00EE:  RETLW  0C
00EF:  RETLW  02
00F0:  RETLW  7F
00F1:  RETLW  7F
00F2:  RETLW  02
00F3:  RETLW  04
00F4:  RETLW  08
00F5:  RETLW  7F
00F6:  RETLW  3E
00F7:  RETLW  41
00F8:  RETLW  41
00F9:  RETLW  41
00FA:  RETLW  3E
00FB:  RETLW  7F
00FC:  RETLW  09
00FD:  RETLW  09
00FE:  RETLW  09
00FF:  RETLW  06
0100:  RETLW  1E
0101:  RETLW  21
0102:  RETLW  21
0103:  RETLW  21
0104:  RETLW  5E
0105:  RETLW  7F
0106:  RETLW  09
0107:  RETLW  09
0108:  RETLW  09
0109:  RETLW  76
010A:  BSF    0A.0
010B:  BCF    0A.1
010C:  BCF    0A.2
010D:  ADDWF  02,F
010E:  RETLW  26
010F:  RETLW  49
0110:  RETLW  49
0111:  RETLW  49
0112:  RETLW  32
0113:  RETLW  01
0114:  RETLW  01
0115:  RETLW  7F
0116:  RETLW  01
0117:  RETLW  01
0118:  RETLW  3F
0119:  RETLW  40
011A:  RETLW  40
011B:  RETLW  40
011C:  RETLW  3F
011D:  RETLW  1F
011E:  RETLW  20
011F:  RETLW  40
0120:  RETLW  20
0121:  RETLW  1F
0122:  RETLW  7F
0123:  RETLW  20
0124:  RETLW  10
0125:  RETLW  20
0126:  RETLW  7F
0127:  RETLW  41
0128:  RETLW  22
0129:  RETLW  1C
012A:  RETLW  22
012B:  RETLW  41
012C:  RETLW  07
012D:  RETLW  08
012E:  RETLW  70
012F:  RETLW  08
0130:  RETLW  07
0131:  RETLW  61
0132:  RETLW  51
0133:  RETLW  49
0134:  RETLW  45
0135:  RETLW  43
0136:  RETLW  00
0137:  RETLW  7F
0138:  RETLW  41
0139:  RETLW  00
013A:  RETLW  00
013B:  RETLW  02
013C:  RETLW  04
013D:  RETLW  08
013E:  RETLW  10
013F:  RETLW  20
0140:  RETLW  00
0141:  RETLW  00
0142:  RETLW  41
0143:  RETLW  7F
0144:  RETLW  00
0145:  RETLW  04
0146:  RETLW  02
0147:  RETLW  01
0148:  RETLW  02
0149:  RETLW  04
014A:  RETLW  40
014B:  RETLW  40
014C:  RETLW  40
014D:  RETLW  40
014E:  RETLW  40
014F:  RETLW  00
0150:  RETLW  01
0151:  RETLW  02
0152:  RETLW  04
0153:  RETLW  00
0154:  RETLW  20
0155:  RETLW  54
0156:  RETLW  54
0157:  RETLW  54
0158:  RETLW  78
0159:  RETLW  7F
015A:  RETLW  44
015B:  RETLW  44
015C:  RETLW  44
015D:  RETLW  38
015E:  RETLW  38
015F:  RETLW  44
0160:  RETLW  44
0161:  RETLW  44
0162:  RETLW  44
0163:  RETLW  38
0164:  RETLW  44
0165:  RETLW  44
0166:  RETLW  44
0167:  RETLW  7F
0168:  RETLW  38
0169:  RETLW  54
016A:  RETLW  54
016B:  RETLW  54
016C:  RETLW  18
016D:  RETLW  04
016E:  RETLW  04
016F:  RETLW  7E
0170:  RETLW  05
0171:  RETLW  05
0172:  RETLW  08
0173:  RETLW  54
0174:  RETLW  54
0175:  RETLW  54
0176:  RETLW  3C
0177:  RETLW  7F
0178:  RETLW  08
0179:  RETLW  04
017A:  RETLW  04
017B:  RETLW  78
017C:  RETLW  00
017D:  RETLW  44
017E:  RETLW  7D
017F:  RETLW  40
0180:  RETLW  00
0181:  RETLW  20
0182:  RETLW  40
0183:  RETLW  44
0184:  RETLW  3D
0185:  RETLW  00
0186:  RETLW  7F
0187:  RETLW  10
0188:  RETLW  28
0189:  RETLW  44
018A:  RETLW  00
018B:  RETLW  00
018C:  RETLW  41
018D:  RETLW  7F
018E:  RETLW  40
018F:  RETLW  00
0190:  RETLW  7C
0191:  RETLW  04
0192:  RETLW  78
0193:  RETLW  04
0194:  RETLW  78
0195:  RETLW  7C
0196:  RETLW  08
0197:  RETLW  04
0198:  RETLW  04
0199:  RETLW  78
019A:  RETLW  38
019B:  RETLW  44
019C:  RETLW  44
019D:  RETLW  44
019E:  RETLW  38
019F:  RETLW  7C
01A0:  RETLW  14
01A1:  RETLW  14
01A2:  RETLW  14
01A3:  RETLW  08
01A4:  RETLW  08
01A5:  RETLW  14
01A6:  RETLW  14
01A7:  RETLW  14
01A8:  RETLW  7C
01A9:  RETLW  00
01AA:  RETLW  7C
01AB:  RETLW  08
01AC:  RETLW  04
01AD:  RETLW  04
01AE:  RETLW  48
01AF:  RETLW  54
01B0:  RETLW  54
01B1:  RETLW  54
01B2:  RETLW  20
01B3:  RETLW  04
01B4:  RETLW  04
01B5:  RETLW  3F
01B6:  RETLW  44
01B7:  RETLW  44
01B8:  RETLW  3C
01B9:  RETLW  40
01BA:  RETLW  40
01BB:  RETLW  20
01BC:  RETLW  7C
01BD:  RETLW  1C
01BE:  RETLW  20
01BF:  RETLW  40
01C0:  RETLW  20
01C1:  RETLW  1C
01C2:  RETLW  3C
01C3:  RETLW  40
01C4:  RETLW  30
01C5:  RETLW  40
01C6:  RETLW  3C
01C7:  RETLW  44
01C8:  RETLW  28
01C9:  RETLW  10
01CA:  RETLW  28
01CB:  RETLW  44
01CC:  RETLW  0C
01CD:  RETLW  50
01CE:  RETLW  50
01CF:  RETLW  50
01D0:  RETLW  3C
01D1:  RETLW  44
01D2:  RETLW  64
01D3:  RETLW  54
01D4:  RETLW  4C
01D5:  RETLW  44
01D6:  RETLW  00
01D7:  RETLW  08
01D8:  RETLW  36
01D9:  RETLW  41
01DA:  RETLW  41
01DB:  RETLW  00
01DC:  RETLW  00
01DD:  RETLW  7F
01DE:  RETLW  00
01DF:  RETLW  00
01E0:  RETLW  41
01E1:  RETLW  41
01E2:  RETLW  36
01E3:  RETLW  08
01E4:  RETLW  00
01E5:  RETLW  02
01E6:  RETLW  01
01E7:  RETLW  02
01E8:  RETLW  04
01E9:  RETLW  02
*
0215:  CLRF   77
0216:  CLRF   78
0217:  MOVF   46,W
0218:  BCF    03.0
0219:  BTFSC  47.0
021A:  ADDWF  77,F
021B:  RRF    77,F
021C:  RRF    78,F
021D:  BTFSC  47.1
021E:  ADDWF  77,F
021F:  RRF    77,F
0220:  RRF    78,F
0221:  BTFSC  47.2
0222:  ADDWF  77,F
0223:  RRF    77,F
0224:  RRF    78,F
0225:  BTFSC  47.3
0226:  ADDWF  77,F
0227:  RRF    77,F
0228:  RRF    78,F
0229:  BTFSC  47.4
022A:  ADDWF  77,F
022B:  RRF    77,F
022C:  RRF    78,F
022D:  BTFSC  47.5
022E:  ADDWF  77,F
022F:  RRF    77,F
0230:  RRF    78,F
0231:  BTFSC  47.6
0232:  ADDWF  77,F
0233:  RRF    77,F
0234:  RRF    78,F
0235:  BTFSC  47.7
0236:  ADDWF  77,F
0237:  RRF    77,F
0238:  RRF    78,F
0239:  RETURN
*
050A:  MOVF   53,W
050B:  XORWF  55,W
050C:  ANDLW  80
050D:  MOVWF  57
050E:  BTFSS  53.7
050F:  GOTO   515
0510:  COMF   52,F
0511:  COMF   53,F
0512:  INCF   52,F
0513:  BTFSC  03.2
0514:  INCF   53,F
0515:  BTFSS  55.7
0516:  GOTO   51C
0517:  COMF   54,F
0518:  COMF   55,F
0519:  INCF   54,F
051A:  BTFSC  03.2
051B:  INCF   55,F
051C:  MOVLW  10
051D:  MOVWF  56
051E:  CLRF   77
051F:  CLRF   7A
0520:  RRF    53,F
0521:  RRF    52,F
0522:  BTFSS  03.0
0523:  GOTO   52A
0524:  MOVF   54,W
0525:  ADDWF  77,F
0526:  BTFSC  03.0
0527:  INCF   7A,F
0528:  MOVF   55,W
0529:  ADDWF  7A,F
052A:  RRF    7A,F
052B:  RRF    77,F
052C:  RRF    79,F
052D:  RRF    78,F
052E:  DECFSZ 56,F
052F:  GOTO   520
0530:  BTFSS  57.7
0531:  GOTO   537
0532:  COMF   78,F
0533:  COMF   79,F
0534:  INCF   78,F
0535:  BTFSC  03.2
0536:  INCF   79,F
0537:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=8MHz) 
*
0440:  MOVLW  36
0441:  MOVWF  04
0442:  BCF    03.7
0443:  MOVF   00,W
0444:  BTFSC  03.2
0445:  GOTO   453
0446:  MOVLW  02
0447:  MOVWF  78
0448:  CLRF   77
0449:  DECFSZ 77,F
044A:  GOTO   449
044B:  DECFSZ 78,F
044C:  GOTO   448
044D:  MOVLW  97
044E:  MOVWF  77
044F:  DECFSZ 77,F
0450:  GOTO   44F
0451:  DECFSZ 00,F
0452:  GOTO   446
0453:  RETURN
....................  
....................  
.................... #include <hdm64gs12.c>//grafik lcd için hdm64gs12.c kütüphanesi eklenmiþtir 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                           HDM64GS12.c                           //// 
.................... ////                                                                 //// 
.................... //// This file contains drivers for using a Hantronix HDM64GS12 with //// 
.................... //// a KS0108 display controller. The HDM64GS12 is 128 by 64 pixels. //// 
.................... //// The driver treats the upper left pixel as (0,0).                //// 
.................... ////                                                                 //// 
.................... //// Use #define FAST_GLCD if the target chip has at least 1k of RAM //// 
.................... //// to decrease the time it takes to update the display.            //// 
.................... //// glcd_update() must then be called to update the display after   //// 
.................... //// changing the pixel information.                                 //// 
.................... //// See ex_glcd.c for suggested usage.                              //// 
.................... //// See KS0108.c for controlling a single 64 by 64 display          //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// LCD Pin connections:                                            //// 
.................... //// (These can be changed as needed in the following defines).      //// 
.................... ////  * 1: VSS is connected to GND                                   //// 
.................... ////  * 2: VDD is connected to +5V                                   //// 
.................... ////  * 3: V0  - LCD operating voltage (Constrast adjustment)        //// 
.................... ////  * 4: D/I - Data or Instruction is connected to B2              //// 
.................... ////  * 5: R/W - Read or Write is connected to B4                    //// 
.................... ////  * 6: Enable is connected to B5                                 //// 
.................... ////  *7-14: Data Bus 0 to 7 is connected to port d                  //// 
.................... ////  *15: Chip Select 1 is connected to B0                          //// 
.................... ////  *16: Chip Select 2 is connected to B1                          //// 
.................... ////  *17: Reset is connected to C0                                  //// 
.................... ////  *18: Negative voltage is also connected to the 20k Ohm POT     //// 
.................... ////  *19: Positive voltage for LED backlight is connected to +5V    //// 
.................... ////  *20: Negavtive voltage for LED backlight is connected to GND   //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_init(mode)                                                //// 
.................... ////     * Must be called before any other function.                 //// 
.................... ////       - mode can be ON or OFF to turn the LCD on or off         //// 
.................... ////                                                                 //// 
.................... ////  glcd_pixel(x,y,color)                                          //// 
.................... ////     * Sets the pixel to the given color.                        //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_fillScreen(color)                                         //// 
.................... ////     * Fills the entire LCD with the given color.                //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_update()                                                  //// 
.................... ////     * Write the display data stored in RAM to the LCD           //// 
.................... ////     * Only available if FAST_GLCD is defined                    //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
....................  
.................... #ifndef HDM64GS12 
.................... #define HDM64GS12 
....................  
.................... #ifndef GLCD_WIDTH 
.................... #define GLCD_WIDTH   128 
.................... #endif 
....................  
.................... #ifndef GLCD_CS1 
.................... #define GLCD_CS1     PIN_B0   // Chip Selection 1 
.................... #endif 
....................  
.................... #ifndef GLCD_CS2 
.................... #define GLCD_CS2     PIN_B1   // Chip Selection 2 
.................... #endif 
....................  
.................... #ifndef GLCD_DI 
.................... #define GLCD_DI      PIN_B2   // Data or Instruction input 
.................... #endif 
....................  
.................... #ifndef GLCD_RW 
.................... #define GLCD_RW      PIN_B4   // Read/Write 
.................... #endif 
....................  
.................... #ifndef GLCD_E 
.................... #define GLCD_E       PIN_B5   // Enable 
.................... #endif 
....................  
.................... #ifndef GLCD_RST 
.................... #define GLCD_RST     PIN_C0   // Reset 
.................... #endif 
....................  
.................... #define GLCD_LEFT    0 
.................... #define GLCD_RIGHT   1 
....................  
.................... #ifndef ON 
.................... #define ON           1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF          0 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Function Prototypes 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_init(int1 mode); 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color); 
.................... void glcd_fillScreen(int1 color); 
.................... void glcd_writeByte(int1 side, BYTE data); 
.................... BYTE glcd_readByte(int1 side); 
.................... void glcd_update(); 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifdef FAST_GLCD 
.................... struct 
.................... { 
....................    unsigned int8 left[512]; 
....................    unsigned int8 right[512]; 
.................... } displayData; 
.................... #endif 
....................  
....................  
.................... // Purpose:       Initialize the LCD. 
.................... //                Call before using any other LCD function. 
.................... // Inputs:        OFF - Turns the LCD off 
.................... //                ON  - Turns the LCD on 
.................... void glcd_init(int1 mode) 
.................... { 
....................    // Initialze some pins 
....................    output_high(GLCD_RST); 
*
023A:  BCF    20.0
023B:  MOVF   20,W
023C:  BSF    03.5
023D:  MOVWF  07
023E:  BCF    03.5
023F:  BSF    07.0
....................    output_low(GLCD_E); 
0240:  BSF    03.5
0241:  BCF    06.5
0242:  BCF    03.5
0243:  BCF    06.5
....................    output_low(GLCD_CS1); 
0244:  BSF    03.5
0245:  BCF    06.0
0246:  BCF    03.5
0247:  BCF    06.0
....................    output_low(GLCD_CS2); 
0248:  BSF    03.5
0249:  BCF    06.1
024A:  BCF    03.5
024B:  BCF    06.1
....................  
....................    output_low(GLCD_DI);                 // Set for instruction 
024C:  BSF    03.5
024D:  BCF    06.2
024E:  BCF    03.5
024F:  BCF    06.2
....................    glcd_writeByte(GLCD_LEFT,  0xC0);    // Specify first RAM line at the top 
0250:  CLRF   58
0251:  MOVLW  C0
0252:  MOVWF  59
0253:  CALL   1EA
....................    glcd_writeByte(GLCD_RIGHT, 0xC0);    //   of the screen 
0254:  MOVLW  01
0255:  MOVWF  58
0256:  MOVLW  C0
0257:  MOVWF  59
0258:  CALL   1EA
....................    glcd_writeByte(GLCD_LEFT,  0x40);    // Set the column address to 0 
0259:  CLRF   58
025A:  MOVLW  40
025B:  MOVWF  59
025C:  CALL   1EA
....................    glcd_writeByte(GLCD_RIGHT, 0x40); 
025D:  MOVLW  01
025E:  MOVWF  58
025F:  MOVLW  40
0260:  MOVWF  59
0261:  CALL   1EA
....................    glcd_writeByte(GLCD_LEFT,  0xB8);    // Set the page address to 0 
0262:  CLRF   58
0263:  MOVLW  B8
0264:  MOVWF  59
0265:  CALL   1EA
....................    glcd_writeByte(GLCD_RIGHT, 0xB8); 
0266:  MOVLW  01
0267:  MOVWF  58
0268:  MOVLW  B8
0269:  MOVWF  59
026A:  CALL   1EA
....................  
....................    if(mode == ON) 
026B:  DECFSZ 35,W
026C:  GOTO   277
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3F); // Turn the display on 
026D:  CLRF   58
026E:  MOVLW  3F
026F:  MOVWF  59
0270:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, 0x3F); 
0271:  MOVLW  01
0272:  MOVWF  58
0273:  MOVLW  3F
0274:  MOVWF  59
0275:  CALL   1EA
....................    } 
0276:  GOTO   280
....................    else 
....................    { 
....................       glcd_writeByte(GLCD_LEFT,  0x3E); // Turn the display off 
0277:  CLRF   58
0278:  MOVLW  3E
0279:  MOVWF  59
027A:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, 0x3E); 
027B:  MOVLW  01
027C:  MOVWF  58
027D:  MOVLW  3E
027E:  MOVWF  59
027F:  CALL   1EA
....................    } 
....................  
....................    glcd_fillScreen(OFF);                // Clear the display 
0280:  CLRF   36
....................  
....................    #ifdef FAST_GLCD 
*
02C6:  RETURN
....................    glcd_update(); 
....................    #endif 
.................... } 
....................  
....................  
.................... // Purpose:    Update the LCD with data from the display arrays 
.................... #ifdef FAST_GLCD 
.................... void glcd_update() 
.................... { 
....................    unsigned int8 i, j; 
....................    unsigned int8 *p1, *p2; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
....................       glcd_writeByte(GLCD_LEFT, 0x40);          // Set horizontal address to 0 
....................       glcd_writeByte(GLCD_RIGHT, 0x40); 
....................       glcd_writeByte(GLCD_LEFT, i | 0xB8);      // Set page address 
....................       glcd_writeByte(GLCD_RIGHT, i | 0xB8); 
....................       output_high(GLCD_DI);                     // Set for data 
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
....................       { 
....................          glcd_writeByte(GLCD_LEFT, *p1++);      // Turn pixels on or off 
....................          glcd_writeByte(GLCD_RIGHT, *p2++);     // Turn pixels on or off 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Turn a pixel on a graphic LCD on or off 
.................... // Inputs:     1) x - the x coordinate of the pixel 
.................... //             2) y - the y coordinate of the pixel 
.................... //             3) color - ON or OFF 
.................... void glcd_pixel(unsigned int8 x, unsigned int8 y, int1 color) 
.................... #ifdef FAST_GLCD 
*
02F4:  BCF    55.0
.................... { 
....................    unsigned int8* p; 
....................    unsigned int16 temp; 
....................    temp =  y/8; 
....................    temp *= 64; 
....................    temp += x; 
....................  
....................    if(x > 63) 
....................    { 
....................       p = displayData.right + temp - 64; 
....................    } 
....................    else 
....................    { 
....................       p = displayData.left + temp; 
....................    } 
....................  
....................    if(color) 
....................    { 
....................       bit_set(*p, y%8); 
....................    } 
....................    else 
....................    { 
....................       bit_clear(*p, y%8); 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    BYTE data; 
....................    int1 side = GLCD_LEFT;  // Stores which chip to use on the LCD 
....................  
....................    if(x > 63)              // Check for first or second display area 
02F5:  MOVF   51,W
02F6:  SUBLW  3F
02F7:  BTFSC  03.0
02F8:  GOTO   2FC
....................    { 
....................       x -= 64; 
02F9:  MOVLW  40
02FA:  SUBWF  51,F
....................       side = GLCD_RIGHT; 
02FB:  BSF    55.0
....................    } 
....................  
....................    output_low(GLCD_DI);                         // Set for instruction 
02FC:  BSF    03.5
02FD:  BCF    06.2
02FE:  BCF    03.5
02FF:  BCF    06.2
....................    bit_clear(x,7);                              // Clear the MSB. Part of an instruction code 
0300:  BCF    51.7
....................    bit_set(x,6);                                // Set bit 6. Also part of an instruction code 
0301:  BSF    51.6
....................    glcd_writeByte(side, x);                     // Set the horizontal address 
0302:  MOVLW  00
0303:  BTFSC  55.0
0304:  MOVLW  01
0305:  MOVWF  56
0306:  MOVWF  58
0307:  MOVF   51,W
0308:  MOVWF  59
0309:  CALL   1EA
....................    glcd_writeByte(side, (y/8 & 0xBF) | 0xB8);   // Set the vertical page address 
030A:  MOVLW  00
030B:  BTFSC  55.0
030C:  MOVLW  01
030D:  MOVWF  56
030E:  RRF    52,W
030F:  MOVWF  77
0310:  RRF    77,F
0311:  RRF    77,F
0312:  MOVLW  1F
0313:  ANDWF  77,F
0314:  MOVF   77,W
0315:  ANDLW  BF
0316:  IORLW  B8
0317:  MOVWF  57
0318:  MOVF   56,W
0319:  MOVWF  58
031A:  MOVF   57,W
031B:  MOVWF  59
031C:  CALL   1EA
....................    output_high(GLCD_DI);                        // Set for data 
031D:  BSF    03.5
031E:  BCF    06.2
031F:  BCF    03.5
0320:  BSF    06.2
....................    glcd_readByte(side);                         // Need two reads to get data 
0321:  MOVLW  00
0322:  BTFSC  55.0
0323:  MOVLW  01
0324:  MOVWF  56
0325:  MOVWF  57
0326:  CALL   2C7
....................    data = glcd_readByte(side);                  //  at new address 
0327:  MOVLW  00
0328:  BTFSC  55.0
0329:  MOVLW  01
032A:  MOVWF  56
032B:  MOVWF  57
032C:  CALL   2C7
032D:  MOVF   78,W
032E:  MOVWF  54
....................  
....................    if(color == ON) 
032F:  DECFSZ 53,W
0330:  GOTO   341
....................       bit_set(data, y%8);        // Turn the pixel on 
0331:  MOVF   52,W
0332:  ANDLW  07
0333:  MOVWF  56
0334:  MOVLW  01
0335:  MOVWF  77
0336:  MOVF   56,W
0337:  MOVWF  78
0338:  BTFSC  03.2
0339:  GOTO   33E
033A:  BCF    03.0
033B:  RLF    77,F
033C:  DECFSZ 78,F
033D:  GOTO   33A
033E:  MOVF   77,W
033F:  IORWF  54,F
0340:  GOTO   351
....................    else                          // or 
....................       bit_clear(data, y%8);      // turn the pixel off 
0341:  MOVF   52,W
0342:  ANDLW  07
0343:  MOVWF  56
0344:  MOVLW  01
0345:  MOVWF  77
0346:  MOVF   56,W
0347:  MOVWF  78
0348:  BTFSC  03.2
0349:  GOTO   34E
034A:  BCF    03.0
034B:  RLF    77,F
034C:  DECFSZ 78,F
034D:  GOTO   34A
034E:  MOVF   77,W
034F:  XORLW  FF
0350:  ANDWF  54,F
....................  
....................    output_low(GLCD_DI);          // Set for instruction 
0351:  BSF    03.5
0352:  BCF    06.2
0353:  BCF    03.5
0354:  BCF    06.2
....................    glcd_writeByte(side, x);      // Set the horizontal address 
0355:  MOVLW  00
0356:  BTFSC  55.0
0357:  MOVLW  01
0358:  MOVWF  56
0359:  MOVWF  58
035A:  MOVF   51,W
035B:  MOVWF  59
035C:  CALL   1EA
....................    output_high(GLCD_DI);         // Set for data 
035D:  BSF    03.5
035E:  BCF    06.2
035F:  BCF    03.5
0360:  BSF    06.2
....................    glcd_writeByte(side, data);   // Write the pixel data 
0361:  MOVLW  00
0362:  BTFSC  55.0
0363:  MOVLW  01
0364:  MOVWF  56
0365:  MOVWF  58
0366:  MOVF   54,W
0367:  MOVWF  59
0368:  CALL   1EA
0369:  RETURN
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Fill the LCD screen with the passed in color 
.................... // Inputs:     ON  - turn all the pixels on 
.................... //             OFF - turn all the pixels off 
.................... void glcd_fillScreen(int1 color) 
.................... #ifdef FAST_GLCD 
.................... { 
....................    unsigned int8  data; 
....................    unsigned int8  *p1, *p2; 
....................    unsigned int16 i; 
....................  
....................    p1 = displayData.left; 
....................    p2 = displayData.right; 
....................    data = 0xFF * color; 
....................  
....................    for(i=0; i<512; ++i) 
....................    { 
....................    	*p1++ = data; 
....................    	*p2++ = data; 
....................    } 
.................... } 
.................... #else 
.................... { 
....................    unsigned int8 i, j; 
....................  
....................    // Loop through the vertical pages 
....................    for(i = 0; i < 8; ++i) 
*
0281:  CLRF   37
0282:  MOVF   37,W
0283:  SUBLW  07
0284:  BTFSS  03.0
0285:  GOTO   2C6
....................    { 
....................       output_low(GLCD_DI);                      // Set for instruction 
0286:  BSF    03.5
0287:  BCF    06.2
0288:  BCF    03.5
0289:  BCF    06.2
....................       glcd_writeByte(GLCD_LEFT, 0b01000000);    // Set horizontal address to 0 
028A:  CLRF   58
028B:  MOVLW  40
028C:  MOVWF  59
028D:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, 0b01000000); 
028E:  MOVLW  01
028F:  MOVWF  58
0290:  MOVLW  40
0291:  MOVWF  59
0292:  CALL   1EA
....................       glcd_writeByte(GLCD_LEFT, i | 0b10111000);// Set page address 
0293:  MOVF   37,W
0294:  IORLW  B8
0295:  MOVWF  39
0296:  CLRF   58
0297:  MOVF   39,W
0298:  MOVWF  59
0299:  CALL   1EA
....................       glcd_writeByte(GLCD_RIGHT, i | 0b10111000); 
029A:  MOVF   37,W
029B:  IORLW  B8
029C:  MOVWF  39
029D:  MOVLW  01
029E:  MOVWF  58
029F:  MOVF   39,W
02A0:  MOVWF  59
02A1:  CALL   1EA
....................       output_high(GLCD_DI);                     // Set for data 
02A2:  BSF    03.5
02A3:  BCF    06.2
02A4:  BCF    03.5
02A5:  BSF    06.2
....................  
....................       // Loop through the horizontal sections 
....................       for(j = 0; j < 64; ++j) 
02A6:  CLRF   38
02A7:  MOVF   38,W
02A8:  SUBLW  3F
02A9:  BTFSS  03.0
02AA:  GOTO   2C4
....................       { 
....................          glcd_writeByte(GLCD_LEFT, 0xFF*color);  // Turn pixels on or off 
02AB:  MOVLW  FF
02AC:  MOVWF  46
02AD:  MOVF   36,W
02AE:  MOVWF  47
02AF:  CALL   215
02B0:  MOVF   78,W
02B1:  MOVWF  39
02B2:  CLRF   58
02B3:  MOVF   78,W
02B4:  MOVWF  59
02B5:  CALL   1EA
....................          glcd_writeByte(GLCD_RIGHT, 0xFF*color); // Turn pixels on or off 
02B6:  MOVLW  FF
02B7:  MOVWF  46
02B8:  MOVF   36,W
02B9:  MOVWF  47
02BA:  CALL   215
02BB:  MOVF   78,W
02BC:  MOVWF  39
02BD:  MOVLW  01
02BE:  MOVWF  58
02BF:  MOVF   78,W
02C0:  MOVWF  59
02C1:  CALL   1EA
02C2:  INCF   38,F
02C3:  GOTO   2A7
....................       } 
02C4:  INCF   37,F
02C5:  GOTO   282
....................    } 
.................... } 
.................... #endif 
....................  
....................  
.................... // Purpose:    Write a byte of data to the specified chip 
.................... // Inputs:     1) chipSelect - which chip to write the data to 
.................... //             2) data - the byte of data to write 
.................... void glcd_writeByte(int1 side, BYTE data) 
.................... { 
....................    set_tris_d(0x00); 
*
01EA:  MOVLW  00
01EB:  BSF    03.5
01EC:  MOVWF  08
....................     
....................    output_low(GLCD_RW);       // Set for writing 
01ED:  BCF    06.4
01EE:  BCF    03.5
01EF:  BCF    06.4
....................  
.................... 	 if(side)                   // Choose which side to write to 
01F0:  MOVF   58,F
01F1:  BTFSC  03.2
01F2:  GOTO   1F8
....................       output_high(GLCD_CS2); 
01F3:  BSF    03.5
01F4:  BCF    06.1
01F5:  BCF    03.5
01F6:  BSF    06.1
01F7:  GOTO   1FC
....................    else 
....................       output_high(GLCD_CS1); 
01F8:  BSF    03.5
01F9:  BCF    06.0
01FA:  BCF    03.5
01FB:  BSF    06.0
....................  
.................... 	 delay_us(1); 
01FC:  GOTO   1FD
....................  
....................    output_d(data);            // Put the data on the port 
01FD:  BSF    03.5
01FE:  CLRF   08
01FF:  BCF    03.5
0200:  MOVF   59,W
0201:  MOVWF  08
....................    delay_us(1); 
0202:  GOTO   203
....................    output_high(GLCD_E);       // Pulse the enable pin 
0203:  BSF    03.5
0204:  BCF    06.5
0205:  BCF    03.5
0206:  BSF    06.5
....................    delay_us(1); 
0207:  GOTO   208
....................    output_low(GLCD_E); 
0208:  BSF    03.5
0209:  BCF    06.5
020A:  BCF    03.5
020B:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
020C:  BSF    03.5
020D:  BCF    06.0
020E:  BCF    03.5
020F:  BCF    06.0
....................    output_low(GLCD_CS2); 
0210:  BSF    03.5
0211:  BCF    06.1
0212:  BCF    03.5
0213:  BCF    06.1
0214:  RETURN
.................... } 
....................  
....................  
.................... // Purpose:    Reads a byte of data from the specified chip 
.................... // Ouputs:     A byte of data read from the chip 
.................... BYTE glcd_readByte(int1 side) 
.................... { 
....................    BYTE data;                 // Stores the data read from the LCD 
....................  
....................    set_tris_d(0xFF);          // Set port d to input 
*
02C7:  MOVLW  FF
02C8:  BSF    03.5
02C9:  MOVWF  08
....................    output_high(GLCD_RW);      // Set for reading 
02CA:  BCF    06.4
02CB:  BCF    03.5
02CC:  BSF    06.4
....................  
....................    if(side)                   // Choose which side to write to 
02CD:  MOVF   57,F
02CE:  BTFSC  03.2
02CF:  GOTO   2D5
....................       output_high(GLCD_CS2); 
02D0:  BSF    03.5
02D1:  BCF    06.1
02D2:  BCF    03.5
02D3:  BSF    06.1
02D4:  GOTO   2D9
....................    else 
....................       output_high(GLCD_CS1); 
02D5:  BSF    03.5
02D6:  BCF    06.0
02D7:  BCF    03.5
02D8:  BSF    06.0
....................  
....................    delay_us(1); 
02D9:  GOTO   2DA
....................    output_high(GLCD_E);       // Pulse the enable pin 
02DA:  BSF    03.5
02DB:  BCF    06.5
02DC:  BCF    03.5
02DD:  BSF    06.5
....................    delay_us(1); 
02DE:  GOTO   2DF
....................    data = input_d();          // Get the data from the display's output register 
02DF:  MOVLW  FF
02E0:  BSF    03.5
02E1:  MOVWF  08
02E2:  BCF    03.5
02E3:  MOVF   08,W
02E4:  MOVWF  58
....................    output_low(GLCD_E); 
02E5:  BSF    03.5
02E6:  BCF    06.5
02E7:  BCF    03.5
02E8:  BCF    06.5
....................  
....................    output_low(GLCD_CS1);      // Reset the chip select lines 
02E9:  BSF    03.5
02EA:  BCF    06.0
02EB:  BCF    03.5
02EC:  BCF    06.0
....................    output_low(GLCD_CS2); 
02ED:  BSF    03.5
02EE:  BCF    06.1
02EF:  BCF    03.5
02F0:  BCF    06.1
....................    return data;               // Return the read data 
02F1:  MOVF   58,W
02F2:  MOVWF  78
02F3:  RETURN
.................... } 
....................  
.................... #endif 
....................  
.................... #include <graphics.c>//grafik lcd de çizgi ve þekiller çizebilmek için graphics.c dostyasý eklenmiþtir 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2010 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef GRAPHICS_DRAWING_FUNCTIONS 
.................... #define GRAPHICS_DRAWING_FUNCTIONS 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifndef ON 
.................... #define ON  1 
.................... #endif 
....................  
.................... #ifndef OFF 
.................... #define OFF 0 
.................... #endif 
....................  
.................... #ifndef YES 
.................... #define YES 1 
.................... #endif 
....................  
.................... #ifndef NO 
.................... #define NO  0 
.................... #endif 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const unsigned int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const unsigned int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_line(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, iunsigned nt16 y2, int1 color) 
.................... #else 
.................... void glcd_line(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 color) 
.................... #endif 
*
0454:  MOVLW  01
0455:  MOVWF  4A
0456:  MOVWF  4B
0457:  CLRF   50
.................... { 
....................    unsigned int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
0458:  MOVF   41,W
0459:  SUBWF  43,W
045A:  MOVWF  51
045B:  MOVF   51,W
045C:  BTFSS  51.7
045D:  GOTO   460
045E:  MOVF   51,W
045F:  SUBLW  00
0460:  CLRF   7A
0461:  MOVWF  48
0462:  MOVF   7A,W
0463:  MOVWF  49
....................    dy = abs((signed int8)(y2 - y1)); 
0464:  MOVF   42,W
0465:  SUBWF  44,W
0466:  MOVWF  51
0467:  MOVF   51,W
0468:  BTFSS  51.7
0469:  GOTO   46C
046A:  MOVF   51,W
046B:  SUBLW  00
046C:  CLRF   7A
046D:  MOVWF  46
046E:  MOVF   7A,W
046F:  MOVWF  47
....................    #endif 
....................  
....................    if(x1 > x2) 
0470:  MOVF   41,W
0471:  SUBWF  43,W
0472:  BTFSC  03.0
0473:  GOTO   476
....................       addx = -1; 
0474:  MOVLW  FF
0475:  MOVWF  4A
....................    if(y1 > y2) 
0476:  MOVF   42,W
0477:  SUBWF  44,W
0478:  BTFSC  03.0
0479:  GOTO   47C
....................       addy = -1; 
047A:  MOVLW  FF
047B:  MOVWF  4B
....................  
....................    if(dx >= dy) 
047C:  MOVF   47,W
047D:  SUBWF  49,W
047E:  BTFSS  03.0
047F:  GOTO   4C8
0480:  BTFSS  03.2
0481:  GOTO   486
0482:  MOVF   46,W
0483:  SUBWF  48,W
0484:  BTFSS  03.0
0485:  GOTO   4C8
....................    { 
....................       dy *= 2; 
0486:  BCF    03.0
0487:  RLF    46,F
0488:  RLF    47,F
....................       P = dy - dx; 
0489:  MOVF   48,W
048A:  SUBWF  46,W
048B:  MOVWF  77
048C:  MOVF   47,W
048D:  MOVWF  7A
048E:  MOVF   49,W
048F:  BTFSS  03.0
0490:  INCFSZ 49,W
0491:  SUBWF  7A,F
0492:  MOVF   77,W
0493:  MOVWF  4C
0494:  MOVF   7A,W
0495:  MOVWF  4D
....................       diff = P - dx; 
0496:  MOVF   48,W
0497:  SUBWF  4C,W
0498:  MOVWF  4E
0499:  MOVF   4D,W
049A:  MOVWF  4F
049B:  MOVF   49,W
049C:  BTFSS  03.0
049D:  INCFSZ 49,W
049E:  SUBWF  4F,F
....................  
....................       for(; i<=dx; ++i) 
049F:  MOVF   49,F
04A0:  BTFSS  03.2
04A1:  GOTO   4A6
04A2:  MOVF   50,W
04A3:  SUBWF  48,W
04A4:  BTFSS  03.0
04A5:  GOTO   4C7
....................       { 
....................          glcd_pixel(x1, y1, color); 
04A6:  MOVF   41,W
04A7:  MOVWF  51
04A8:  MOVF   42,W
04A9:  MOVWF  52
04AA:  MOVF   45,W
04AB:  MOVWF  53
04AC:  CALL   2F4
....................  
....................          if(P < 0) 
04AD:  BTFSS  4D.7
04AE:  GOTO   4B9
....................          { 
....................             P  += dy; 
04AF:  MOVF   46,W
04B0:  ADDWF  4C,F
04B1:  MOVF   47,W
04B2:  BTFSC  03.0
04B3:  INCFSZ 47,W
04B4:  ADDWF  4D,F
....................             x1 += addx; 
04B5:  MOVF   4A,W
04B6:  ADDWF  41,W
04B7:  MOVWF  41
....................          } 
04B8:  GOTO   4C5
....................          else 
....................          { 
....................             P  += diff; 
04B9:  MOVF   4E,W
04BA:  ADDWF  4C,F
04BB:  MOVF   4F,W
04BC:  BTFSC  03.0
04BD:  INCFSZ 4F,W
04BE:  ADDWF  4D,F
....................             x1 += addx; 
04BF:  MOVF   4A,W
04C0:  ADDWF  41,W
04C1:  MOVWF  41
....................             y1 += addy; 
04C2:  MOVF   4B,W
04C3:  ADDWF  42,W
04C4:  MOVWF  42
....................          } 
04C5:  INCF   50,F
04C6:  GOTO   49F
....................       } 
....................    } 
04C7:  GOTO   509
....................    else 
....................    { 
....................       dx *= 2; 
04C8:  BCF    03.0
04C9:  RLF    48,F
04CA:  RLF    49,F
....................       P = dx - dy; 
04CB:  MOVF   46,W
04CC:  SUBWF  48,W
04CD:  MOVWF  77
04CE:  MOVF   49,W
04CF:  MOVWF  7A
04D0:  MOVF   47,W
04D1:  BTFSS  03.0
04D2:  INCFSZ 47,W
04D3:  SUBWF  7A,F
04D4:  MOVF   77,W
04D5:  MOVWF  4C
04D6:  MOVF   7A,W
04D7:  MOVWF  4D
....................       diff = P - dy; 
04D8:  MOVF   46,W
04D9:  SUBWF  4C,W
04DA:  MOVWF  4E
04DB:  MOVF   4D,W
04DC:  MOVWF  4F
04DD:  MOVF   47,W
04DE:  BTFSS  03.0
04DF:  INCFSZ 47,W
04E0:  SUBWF  4F,F
....................  
....................       for(; i<=dy; ++i) 
04E1:  MOVF   47,F
04E2:  BTFSS  03.2
04E3:  GOTO   4E8
04E4:  MOVF   50,W
04E5:  SUBWF  46,W
04E6:  BTFSS  03.0
04E7:  GOTO   509
....................       { 
....................          glcd_pixel(x1, y1, color); 
04E8:  MOVF   41,W
04E9:  MOVWF  51
04EA:  MOVF   42,W
04EB:  MOVWF  52
04EC:  MOVF   45,W
04ED:  MOVWF  53
04EE:  CALL   2F4
....................  
....................          if(P < 0) 
04EF:  BTFSS  4D.7
04F0:  GOTO   4FB
....................          { 
....................             P  += dx; 
04F1:  MOVF   48,W
04F2:  ADDWF  4C,F
04F3:  MOVF   49,W
04F4:  BTFSC  03.0
04F5:  INCFSZ 49,W
04F6:  ADDWF  4D,F
....................             y1 += addy; 
04F7:  MOVF   4B,W
04F8:  ADDWF  42,W
04F9:  MOVWF  42
....................          } 
04FA:  GOTO   507
....................          else 
....................          { 
....................             P  += diff; 
04FB:  MOVF   4E,W
04FC:  ADDWF  4C,F
04FD:  MOVF   4F,W
04FE:  BTFSC  03.0
04FF:  INCFSZ 4F,W
0500:  ADDWF  4D,F
....................             x1 += addx; 
0501:  MOVF   4A,W
0502:  ADDWF  41,W
0503:  MOVWF  41
....................             y1 += addy; 
0504:  MOVF   4B,W
0505:  ADDWF  42,W
0506:  MOVWF  42
....................          } 
0507:  INCF   50,F
0508:  GOTO   4E1
....................       } 
....................    } 
0509:  RETURN
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_rect(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, int1 fill, int1 color) 
.................... #else 
.................... void glcd_rect(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    if(fill) 
*
0791:  MOVF   39,F
0792:  BTFSC  03.2
0793:  GOTO   7C4
....................    { 
....................       #ifdef LARGE_LCD 
....................       unsigned int16 i, xmin, xmax, ymin, ymax; 
....................       #else 
....................       unsigned int8  i, xmin, xmax, ymin, ymax; 
....................       #endif 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
0794:  MOVF   37,W
0795:  SUBWF  35,W
0796:  BTFSC  03.0
0797:  GOTO   79D
....................       { 
....................          xmin = x1; 
0798:  MOVF   35,W
0799:  MOVWF  3C
....................          xmax = x2; 
079A:  MOVF   37,W
079B:  MOVWF  3D
....................       } 
079C:  GOTO   7A1
....................       else 
....................       { 
....................          xmin = x2; 
079D:  MOVF   37,W
079E:  MOVWF  3C
....................          xmax = x1; 
079F:  MOVF   35,W
07A0:  MOVWF  3D
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
07A1:  MOVF   38,W
07A2:  SUBWF  36,W
07A3:  BTFSC  03.0
07A4:  GOTO   7AA
....................       { 
....................          ymin = y1; 
07A5:  MOVF   36,W
07A6:  MOVWF  3E
....................          ymax = y2; 
07A7:  MOVF   38,W
07A8:  MOVWF  3F
....................       } 
07A9:  GOTO   7AE
....................       else 
....................       { 
....................          ymin = y2; 
07AA:  MOVF   38,W
07AB:  MOVWF  3E
....................          ymax = y1; 
07AC:  MOVF   36,W
07AD:  MOVWF  3F
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
07AE:  MOVF   3C,W
07AF:  SUBWF  3D,W
07B0:  BTFSS  03.0
07B1:  GOTO   7C3
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
07B2:  MOVF   3E,W
07B3:  MOVWF  3B
07B4:  MOVF   3B,W
07B5:  SUBWF  3F,W
07B6:  BTFSS  03.0
07B7:  GOTO   7C1
....................          { 
....................             glcd_pixel(xmin, i, color); 
07B8:  MOVF   3C,W
07B9:  MOVWF  51
07BA:  MOVF   3B,W
07BB:  MOVWF  52
07BC:  MOVF   3A,W
07BD:  MOVWF  53
07BE:  CALL   2F4
07BF:  INCF   3B,F
07C0:  GOTO   7B4
....................          } 
07C1:  INCF   3C,F
07C2:  GOTO   7AE
....................       } 
....................    } 
07C3:  GOTO   7F0
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
07C4:  MOVF   35,W
07C5:  MOVWF  41
07C6:  MOVF   36,W
07C7:  MOVWF  42
07C8:  MOVF   37,W
07C9:  MOVWF  43
07CA:  MOVF   36,W
07CB:  MOVWF  44
07CC:  MOVF   3A,W
07CD:  MOVWF  45
07CE:  CALL   454
....................       glcd_line(x1, y2, x2, y2, color); 
07CF:  MOVF   35,W
07D0:  MOVWF  41
07D1:  MOVF   38,W
07D2:  MOVWF  42
07D3:  MOVF   37,W
07D4:  MOVWF  43
07D5:  MOVF   38,W
07D6:  MOVWF  44
07D7:  MOVF   3A,W
07D8:  MOVWF  45
07D9:  CALL   454
....................       glcd_line(x1, y1, x1, y2, color); 
07DA:  MOVF   35,W
07DB:  MOVWF  41
07DC:  MOVF   36,W
07DD:  MOVWF  42
07DE:  MOVF   35,W
07DF:  MOVWF  43
07E0:  MOVF   38,W
07E1:  MOVWF  44
07E2:  MOVF   3A,W
07E3:  MOVWF  45
07E4:  CALL   454
....................       glcd_line(x2, y1, x2, y2, color); 
07E5:  MOVF   37,W
07E6:  MOVWF  41
07E7:  MOVF   36,W
07E8:  MOVWF  42
07E9:  MOVF   37,W
07EA:  MOVWF  43
07EB:  MOVF   38,W
07EC:  MOVWF  44
07ED:  MOVF   3A,W
07EE:  MOVWF  45
07EF:  CALL   454
....................    } 
07F0:  BSF    0A.3
07F1:  BCF    0A.4
07F2:  GOTO   10D (RETURN)
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_bar(unsigned int16 x1, unsigned int16 y1, unsigned int16 x2, unsigned int16 y2, unsigned int8 width, int1 color) 
.................... #else 
.................... void glcd_bar(unsigned int8 x1, unsigned int8 y1, unsigned int8 x2, unsigned int8 y2, unsigned int8 width, int1 color) 
.................... #endif 
*
0538:  MOVLW  01
0539:  MOVWF  40
053A:  MOVWF  41
053B:  CLRF   4B
.................... { 
....................    unsigned int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    #ifdef LARGE_LCD 
....................    unsigned int16 i=0; 
....................    dx = abs((signed int16)(x2 - x1)); 
....................    dy = abs((signed int16)(y2 - y1)); 
....................    #else 
....................    unsigned int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
053C:  MOVF   35,W
053D:  SUBWF  37,W
053E:  MOVWF  50
053F:  MOVF   50,W
0540:  BTFSS  50.7
0541:  GOTO   544
0542:  MOVF   50,W
0543:  SUBLW  00
0544:  CLRF   7A
0545:  MOVWF  77
0546:  BTFSC  77.7
0547:  DECF   7A,F
0548:  MOVWF  3E
0549:  MOVF   7A,W
054A:  MOVWF  3F
....................    dy = abs((signed int8)(y2 - y1)); 
054B:  MOVF   36,W
054C:  SUBWF  38,W
054D:  MOVWF  50
054E:  MOVF   50,W
054F:  BTFSS  50.7
0550:  GOTO   553
0551:  MOVF   50,W
0552:  SUBLW  00
0553:  CLRF   7A
0554:  MOVWF  77
0555:  BTFSC  77.7
0556:  DECF   7A,F
0557:  MOVWF  3C
0558:  MOVF   7A,W
0559:  MOVWF  3D
....................    #endif 
....................  
....................    half_width = width/2; 
055A:  BCF    03.0
055B:  RRF    39,W
055C:  MOVWF  3B
....................    c1 = -(dx*x1 + dy*y1); 
055D:  MOVF   3F,W
055E:  MOVWF  53
055F:  MOVF   3E,W
0560:  MOVWF  52
0561:  CLRF   55
0562:  MOVF   35,W
0563:  MOVWF  54
0564:  CALL   50A
0565:  MOVF   79,W
0566:  MOVWF  51
0567:  MOVF   78,W
0568:  MOVWF  50
0569:  MOVF   3D,W
056A:  MOVWF  53
056B:  MOVF   3C,W
056C:  MOVWF  52
056D:  CLRF   55
056E:  MOVF   36,W
056F:  MOVWF  54
0570:  CALL   50A
0571:  MOVF   79,W
0572:  MOVWF  7A
0573:  MOVF   78,W
0574:  ADDWF  50,W
0575:  MOVWF  78
0576:  MOVF   51,W
0577:  BTFSC  03.0
0578:  INCFSZ 51,W
0579:  ADDWF  7A,F
057A:  MOVF   78,W
057B:  SUBLW  00
057C:  MOVWF  47
057D:  CLRF   48
057E:  MOVF   7A,W
057F:  BTFSS  03.0
0580:  INCFSZ 7A,W
0581:  SUBWF  48,F
....................    c2 = -(dx*x2 + dy*y2); 
0582:  MOVF   3F,W
0583:  MOVWF  53
0584:  MOVF   3E,W
0585:  MOVWF  52
0586:  CLRF   55
0587:  MOVF   37,W
0588:  MOVWF  54
0589:  CALL   50A
058A:  MOVF   79,W
058B:  MOVWF  51
058C:  MOVF   78,W
058D:  MOVWF  50
058E:  MOVF   3D,W
058F:  MOVWF  53
0590:  MOVF   3C,W
0591:  MOVWF  52
0592:  CLRF   55
0593:  MOVF   38,W
0594:  MOVWF  54
0595:  CALL   50A
0596:  MOVF   79,W
0597:  MOVWF  7A
0598:  MOVF   78,W
0599:  ADDWF  50,W
059A:  MOVWF  78
059B:  MOVF   51,W
059C:  BTFSC  03.0
059D:  INCFSZ 51,W
059E:  ADDWF  7A,F
059F:  MOVF   78,W
05A0:  SUBLW  00
05A1:  MOVWF  49
05A2:  CLRF   4A
05A3:  MOVF   7A,W
05A4:  BTFSS  03.0
05A5:  INCFSZ 7A,W
05A6:  SUBWF  4A,F
....................  
....................    if(x1 > x2) 
05A7:  MOVF   35,W
05A8:  SUBWF  37,W
05A9:  BTFSC  03.0
05AA:  GOTO   5B9
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
05AB:  MOVF   48,W
05AC:  MOVWF  4D
05AD:  MOVF   47,W
05AE:  MOVWF  4C
....................       c1 = c2; 
05AF:  MOVF   4A,W
05B0:  MOVWF  48
05B1:  MOVF   49,W
05B2:  MOVWF  47
....................       c2 = temp; 
05B3:  MOVF   4D,W
05B4:  MOVWF  4A
05B5:  MOVF   4C,W
05B6:  MOVWF  49
....................       addx = -1; 
05B7:  MOVLW  FF
05B8:  MOVWF  40
....................    } 
....................    if(y1 > y2) 
05B9:  MOVF   36,W
05BA:  SUBWF  38,W
05BB:  BTFSC  03.0
05BC:  GOTO   5CB
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
05BD:  MOVF   48,W
05BE:  MOVWF  4F
05BF:  MOVF   47,W
05C0:  MOVWF  4E
....................       c1 = c2; 
05C1:  MOVF   4A,W
05C2:  MOVWF  48
05C3:  MOVF   49,W
05C4:  MOVWF  47
....................       c2 = temp; 
05C5:  MOVF   4F,W
05C6:  MOVWF  4A
05C7:  MOVF   4E,W
05C8:  MOVWF  49
....................       addy = -1; 
05C9:  MOVLW  FF
05CA:  MOVWF  41
....................    } 
....................  
....................    if(dx >= dy) 
05CB:  BTFSS  3D.7
05CC:  GOTO   5D0
05CD:  BTFSS  3F.7
05CE:  GOTO   5DC
05CF:  GOTO   5D2
05D0:  BTFSC  3F.7
05D1:  GOTO   63A
05D2:  MOVF   3D,W
05D3:  SUBWF  3F,W
05D4:  BTFSS  03.0
05D5:  GOTO   63A
05D6:  BTFSS  03.2
05D7:  GOTO   5DC
05D8:  MOVF   3C,W
05D9:  SUBWF  3E,W
05DA:  BTFSS  03.0
05DB:  GOTO   63A
....................    { 
....................       P = 2*dy - dx; 
05DC:  CLRF   53
05DD:  MOVLW  02
05DE:  MOVWF  52
05DF:  MOVF   3D,W
05E0:  MOVWF  55
05E1:  MOVF   3C,W
05E2:  MOVWF  54
05E3:  CALL   50A
05E4:  MOVF   3E,W
05E5:  SUBWF  78,W
05E6:  MOVWF  43
05E7:  MOVF   79,W
05E8:  MOVWF  44
05E9:  MOVF   3F,W
05EA:  BTFSS  03.0
05EB:  INCFSZ 3F,W
05EC:  SUBWF  44,F
....................       diff = P - dx; 
05ED:  MOVF   3E,W
05EE:  SUBWF  43,W
05EF:  MOVWF  45
05F0:  MOVF   44,W
05F1:  MOVWF  46
05F2:  MOVF   3F,W
05F3:  BTFSS  03.0
05F4:  INCFSZ 3F,W
05F5:  SUBWF  46,F
....................  
....................       for(i=0; i<=dx; ++i) 
05F6:  CLRF   4B
05F7:  BTFSC  3F.7
05F8:  GOTO   639
05F9:  MOVF   3F,F
05FA:  BTFSS  03.2
05FB:  GOTO   600
05FC:  MOVF   4B,W
05FD:  SUBWF  3E,W
05FE:  BTFSS  03.0
05FF:  GOTO   639
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
0600:  MOVF   3B,W
0601:  SUBLW  00
0602:  MOVWF  42
0603:  MOVF   39,W
0604:  ANDLW  01
0605:  ADDWF  3B,W
0606:  BTFSC  42.7
0607:  GOTO   60B
0608:  SUBWF  42,W
0609:  BTFSC  03.0
060A:  GOTO   617
....................          { 
....................                glcd_pixel(x1, y1+j, color); 
060B:  MOVF   42,W
060C:  ADDWF  36,W
060D:  MOVWF  50
060E:  MOVF   35,W
060F:  MOVWF  51
0610:  MOVF   50,W
0611:  MOVWF  52
0612:  MOVF   3A,W
0613:  MOVWF  53
0614:  CALL   2F4
0615:  INCF   42,F
0616:  GOTO   603
....................          } 
....................          if(P < 0) 
0617:  BTFSS  44.7
0618:  GOTO   62B
....................          { 
....................             P  += 2*dy; 
0619:  CLRF   53
061A:  MOVLW  02
061B:  MOVWF  52
061C:  MOVF   3D,W
061D:  MOVWF  55
061E:  MOVF   3C,W
061F:  MOVWF  54
0620:  CALL   50A
0621:  MOVF   78,W
0622:  ADDWF  43,F
0623:  MOVF   79,W
0624:  BTFSC  03.0
0625:  INCFSZ 79,W
0626:  ADDWF  44,F
....................             x1 += addx; 
0627:  MOVF   40,W
0628:  ADDWF  35,W
0629:  MOVWF  35
....................          } 
062A:  GOTO   637
....................          else 
....................          { 
....................             P  += diff; 
062B:  MOVF   45,W
062C:  ADDWF  43,F
062D:  MOVF   46,W
062E:  BTFSC  03.0
062F:  INCFSZ 46,W
0630:  ADDWF  44,F
....................             x1 += addx; 
0631:  MOVF   40,W
0632:  ADDWF  35,W
0633:  MOVWF  35
....................             y1 += addy; 
0634:  MOVF   41,W
0635:  ADDWF  36,W
0636:  MOVWF  36
....................          } 
0637:  INCF   4B,F
0638:  GOTO   5F7
....................       } 
....................    } 
0639:  GOTO   696
....................    else 
....................    { 
....................       P = 2*dx - dy; 
063A:  CLRF   53
063B:  MOVLW  02
063C:  MOVWF  52
063D:  MOVF   3F,W
063E:  MOVWF  55
063F:  MOVF   3E,W
0640:  MOVWF  54
0641:  CALL   50A
0642:  MOVF   3C,W
0643:  SUBWF  78,W
0644:  MOVWF  43
0645:  MOVF   79,W
0646:  MOVWF  44
0647:  MOVF   3D,W
0648:  BTFSS  03.0
0649:  INCFSZ 3D,W
064A:  SUBWF  44,F
....................       diff = P - dy; 
064B:  MOVF   3C,W
064C:  SUBWF  43,W
064D:  MOVWF  45
064E:  MOVF   44,W
064F:  MOVWF  46
0650:  MOVF   3D,W
0651:  BTFSS  03.0
0652:  INCFSZ 3D,W
0653:  SUBWF  46,F
....................  
....................       for(i=0; i<=dy; ++i) 
0654:  CLRF   4B
0655:  BTFSC  3D.7
0656:  GOTO   696
0657:  MOVF   3D,F
0658:  BTFSS  03.2
0659:  GOTO   65E
065A:  MOVF   4B,W
065B:  SUBWF  3C,W
065C:  BTFSS  03.0
065D:  GOTO   696
....................       { 
....................          if(P < 0) 
065E:  BTFSS  44.7
065F:  GOTO   672
....................          { 
....................             P  += 2*dx; 
0660:  CLRF   53
0661:  MOVLW  02
0662:  MOVWF  52
0663:  MOVF   3F,W
0664:  MOVWF  55
0665:  MOVF   3E,W
0666:  MOVWF  54
0667:  CALL   50A
0668:  MOVF   78,W
0669:  ADDWF  43,F
066A:  MOVF   79,W
066B:  BTFSC  03.0
066C:  INCFSZ 79,W
066D:  ADDWF  44,F
....................             y1 += addy; 
066E:  MOVF   41,W
066F:  ADDWF  36,W
0670:  MOVWF  36
....................          } 
0671:  GOTO   67E
....................          else 
....................          { 
....................             P  += diff; 
0672:  MOVF   45,W
0673:  ADDWF  43,F
0674:  MOVF   46,W
0675:  BTFSC  03.0
0676:  INCFSZ 46,W
0677:  ADDWF  44,F
....................             x1 += addx; 
0678:  MOVF   40,W
0679:  ADDWF  35,W
067A:  MOVWF  35
....................             y1 += addy; 
067B:  MOVF   41,W
067C:  ADDWF  36,W
067D:  MOVWF  36
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
067E:  MOVF   3B,W
067F:  SUBLW  00
0680:  MOVWF  42
0681:  MOVF   39,W
0682:  ANDLW  01
0683:  ADDWF  3B,W
0684:  BTFSC  42.7
0685:  GOTO   689
0686:  SUBWF  42,W
0687:  BTFSC  03.0
0688:  GOTO   694
....................          { 
....................                glcd_pixel(x1+j, y1, color); 
0689:  MOVF   42,W
068A:  ADDWF  35,W
068B:  MOVWF  50
068C:  MOVWF  51
068D:  MOVF   36,W
068E:  MOVWF  52
068F:  MOVF   3A,W
0690:  MOVWF  53
0691:  CALL   2F4
0692:  INCF   42,F
0693:  GOTO   681
....................          } 
0694:  INCF   4B,F
0695:  GOTO   655
....................       } 
....................    } 
0696:  BSF    0A.3
0697:  BCF    0A.4
0698:  GOTO   0BD (RETURN)
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_circle(unsigned int16 x, unsigned int16 y, unsigned int16 radius, int1 fill, int1 color) 
.................... #else 
.................... void glcd_circle(unsigned int8 x, unsigned int8 y, unsigned int8 radius, int1 fill, int1 color) 
.................... #endif 
.................... { 
....................    #ifdef LARGE_LCD 
....................    signed int16 a, b, P; 
....................    #else 
....................    signed int8  a, b, P; 
....................    #endif 
....................  
....................    a = 0; 
0699:  CLRF   3A
....................    b = radius; 
069A:  MOVF   37,W
069B:  MOVWF  3B
....................    P = 1 - radius; 
069C:  MOVF   37,W
069D:  SUBLW  01
069E:  MOVWF  3C
....................  
....................    do 
....................    { 
....................       if(fill) 
069F:  MOVF   38,F
06A0:  BTFSC  03.2
06A1:  GOTO   6FF
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
06A2:  MOVF   3A,W
06A3:  SUBWF  35,W
06A4:  MOVWF  3D
06A5:  MOVF   3B,W
06A6:  ADDWF  36,W
06A7:  MOVWF  3E
06A8:  MOVF   3A,W
06A9:  ADDWF  35,W
06AA:  MOVWF  3F
06AB:  MOVF   3B,W
06AC:  ADDWF  36,W
06AD:  MOVWF  40
06AE:  MOVF   3D,W
06AF:  MOVWF  41
06B0:  MOVF   3E,W
06B1:  MOVWF  42
06B2:  MOVF   3F,W
06B3:  MOVWF  43
06B4:  MOVF   40,W
06B5:  MOVWF  44
06B6:  MOVF   39,W
06B7:  MOVWF  45
06B8:  CALL   454
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
06B9:  MOVF   3A,W
06BA:  SUBWF  35,W
06BB:  MOVWF  3D
06BC:  MOVF   3B,W
06BD:  SUBWF  36,W
06BE:  MOVWF  3E
06BF:  MOVF   3A,W
06C0:  ADDWF  35,W
06C1:  MOVWF  3F
06C2:  MOVF   3B,W
06C3:  SUBWF  36,W
06C4:  MOVWF  40
06C5:  MOVF   3D,W
06C6:  MOVWF  41
06C7:  MOVF   3E,W
06C8:  MOVWF  42
06C9:  MOVF   3F,W
06CA:  MOVWF  43
06CB:  MOVF   40,W
06CC:  MOVWF  44
06CD:  MOVF   39,W
06CE:  MOVWF  45
06CF:  CALL   454
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
06D0:  MOVF   3B,W
06D1:  SUBWF  35,W
06D2:  MOVWF  3D
06D3:  MOVF   3A,W
06D4:  ADDWF  36,W
06D5:  MOVWF  3E
06D6:  MOVF   3B,W
06D7:  ADDWF  35,W
06D8:  MOVWF  3F
06D9:  MOVF   3A,W
06DA:  ADDWF  36,W
06DB:  MOVWF  40
06DC:  MOVF   3D,W
06DD:  MOVWF  41
06DE:  MOVF   3E,W
06DF:  MOVWF  42
06E0:  MOVF   3F,W
06E1:  MOVWF  43
06E2:  MOVF   40,W
06E3:  MOVWF  44
06E4:  MOVF   39,W
06E5:  MOVWF  45
06E6:  CALL   454
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
06E7:  MOVF   3B,W
06E8:  SUBWF  35,W
06E9:  MOVWF  3D
06EA:  MOVF   3A,W
06EB:  SUBWF  36,W
06EC:  MOVWF  3E
06ED:  MOVF   3B,W
06EE:  ADDWF  35,W
06EF:  MOVWF  3F
06F0:  MOVF   3A,W
06F1:  SUBWF  36,W
06F2:  MOVWF  40
06F3:  MOVF   3D,W
06F4:  MOVWF  41
06F5:  MOVF   3E,W
06F6:  MOVWF  42
06F7:  MOVF   3F,W
06F8:  MOVWF  43
06F9:  MOVF   40,W
06FA:  MOVWF  44
06FB:  MOVF   39,W
06FC:  MOVWF  45
06FD:  CALL   454
....................       } 
06FE:  GOTO   767
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
06FF:  MOVF   35,W
0700:  ADDWF  3A,W
0701:  MOVWF  3D
0702:  MOVF   36,W
0703:  ADDWF  3B,W
0704:  MOVWF  3E
0705:  MOVF   3D,W
0706:  MOVWF  51
0707:  MOVF   3E,W
0708:  MOVWF  52
0709:  MOVF   39,W
070A:  MOVWF  53
070B:  CALL   2F4
....................          glcd_pixel(b+x, a+y, color); 
070C:  MOVF   35,W
070D:  ADDWF  3B,W
070E:  MOVWF  3D
070F:  MOVF   36,W
0710:  ADDWF  3A,W
0711:  MOVWF  3E
0712:  MOVF   3D,W
0713:  MOVWF  51
0714:  MOVF   3E,W
0715:  MOVWF  52
0716:  MOVF   39,W
0717:  MOVWF  53
0718:  CALL   2F4
....................          glcd_pixel(x-a, b+y, color); 
0719:  MOVF   3A,W
071A:  SUBWF  35,W
071B:  MOVWF  3D
071C:  MOVF   36,W
071D:  ADDWF  3B,W
071E:  MOVWF  3E
071F:  MOVF   3D,W
0720:  MOVWF  51
0721:  MOVF   3E,W
0722:  MOVWF  52
0723:  MOVF   39,W
0724:  MOVWF  53
0725:  CALL   2F4
....................          glcd_pixel(x-b, a+y, color); 
0726:  MOVF   3B,W
0727:  SUBWF  35,W
0728:  MOVWF  3D
0729:  MOVF   36,W
072A:  ADDWF  3A,W
072B:  MOVWF  3E
072C:  MOVF   3D,W
072D:  MOVWF  51
072E:  MOVF   3E,W
072F:  MOVWF  52
0730:  MOVF   39,W
0731:  MOVWF  53
0732:  CALL   2F4
....................          glcd_pixel(b+x, y-a, color); 
0733:  MOVF   35,W
0734:  ADDWF  3B,W
0735:  MOVWF  3D
0736:  MOVF   3A,W
0737:  SUBWF  36,W
0738:  MOVWF  3E
0739:  MOVF   3D,W
073A:  MOVWF  51
073B:  MOVF   3E,W
073C:  MOVWF  52
073D:  MOVF   39,W
073E:  MOVWF  53
073F:  CALL   2F4
....................          glcd_pixel(a+x, y-b, color); 
0740:  MOVF   35,W
0741:  ADDWF  3A,W
0742:  MOVWF  3D
0743:  MOVF   3B,W
0744:  SUBWF  36,W
0745:  MOVWF  3E
0746:  MOVF   3D,W
0747:  MOVWF  51
0748:  MOVF   3E,W
0749:  MOVWF  52
074A:  MOVF   39,W
074B:  MOVWF  53
074C:  CALL   2F4
....................          glcd_pixel(x-a, y-b, color); 
074D:  MOVF   3A,W
074E:  SUBWF  35,W
074F:  MOVWF  3D
0750:  MOVF   3B,W
0751:  SUBWF  36,W
0752:  MOVWF  3E
0753:  MOVF   3D,W
0754:  MOVWF  51
0755:  MOVF   3E,W
0756:  MOVWF  52
0757:  MOVF   39,W
0758:  MOVWF  53
0759:  CALL   2F4
....................          glcd_pixel(x-b, y-a, color); 
075A:  MOVF   3B,W
075B:  SUBWF  35,W
075C:  MOVWF  3D
075D:  MOVF   3A,W
075E:  SUBWF  36,W
075F:  MOVWF  3E
0760:  MOVF   3D,W
0761:  MOVWF  51
0762:  MOVF   3E,W
0763:  MOVWF  52
0764:  MOVF   39,W
0765:  MOVWF  53
0766:  CALL   2F4
....................       } 
....................  
....................       if(P < 0) 
0767:  BTFSS  3C.7
0768:  GOTO   775
....................          P += 3 + 2 * a++; 
0769:  MOVF   3A,W
076A:  INCF   3A,F
076B:  MOVWF  3D
076C:  MOVLW  02
076D:  MOVWF  46
076E:  MOVF   3D,W
076F:  MOVWF  47
0770:  CALL   215
0771:  MOVF   78,W
0772:  ADDLW  03
0773:  ADDWF  3C,F
0774:  GOTO   784
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
0775:  MOVF   3A,W
0776:  INCF   3A,F
0777:  MOVWF  3D
0778:  MOVF   3B,W
0779:  DECF   3B,F
077A:  SUBWF  3D,W
077B:  MOVWF  3D
077C:  MOVLW  02
077D:  MOVWF  46
077E:  MOVF   3D,W
077F:  MOVWF  47
0780:  CALL   215
0781:  MOVF   78,W
0782:  ADDLW  05
0783:  ADDWF  3C,F
....................     } while(a <= b); 
0784:  MOVF   3A,W
0785:  XORLW  80
0786:  MOVWF  77
0787:  MOVF   3B,W
0788:  XORLW  80
0789:  SUBWF  77,W
078A:  BTFSC  03.2
078B:  GOTO   69F
078C:  BTFSS  03.0
078D:  GOTO   69F
078E:  BSF    0A.3
078F:  BCF    0A.4
0790:  GOTO   0E2 (RETURN)
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... #ifdef LARGE_LCD 
.................... void glcd_text57(unsigned int16 x, unsigned int16 y, char* textptr, unsigned int8 size, int1 color) 
.................... #else 
.................... void glcd_text57(unsigned int8 x, unsigned int8 y, char* textptr, unsigned int8 size, int1 color) 
.................... #endif 
.................... { 
....................    unsigned int8 j, k, l, m;                       // Loop counters 
....................    unsigned int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
*
036A:  MOVF   38,W
036B:  MOVWF  7A
036C:  MOVF   37,W
036D:  MOVWF  04
036E:  BCF    03.7
036F:  BTFSC  7A.0
0370:  BSF    03.7
0371:  MOVF   00,F
0372:  BTFSC  03.2
0373:  GOTO   43F
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
0374:  MOVF   38,W
0375:  MOVWF  7A
0376:  MOVF   37,W
0377:  MOVWF  04
0378:  BCF    03.7
0379:  BTFSC  7A.0
037A:  BSF    03.7
037B:  MOVF   00,W
037C:  SUBLW  52
037D:  BTFSS  03.0
037E:  GOTO   39D
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
037F:  MOVF   38,W
0380:  MOVWF  7A
0381:  MOVF   37,W
0382:  MOVWF  04
0383:  BCF    03.7
0384:  BTFSC  7A.0
0385:  BSF    03.7
0386:  MOVLW  20
0387:  SUBWF  00,W
0388:  MOVWF  45
0389:  MOVWF  46
038A:  MOVLW  05
038B:  MOVWF  47
038C:  CALL   215
038D:  MOVF   78,W
038E:  MOVWF  44
038F:  MOVWF  78
0390:  MOVLW  05
0391:  MOVWF  77
0392:  MOVLW  3F
0393:  MOVWF  04
0394:  BCF    03.7
0395:  MOVF   78,W
0396:  CALL   004
0397:  MOVWF  00
0398:  INCF   78,F
0399:  INCF   04,F
039A:  DECFSZ 77,F
039B:  GOTO   395
039C:  GOTO   3CB
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
039D:  MOVF   38,W
039E:  MOVWF  7A
039F:  MOVF   37,W
03A0:  MOVWF  04
03A1:  BCF    03.7
03A2:  BTFSC  7A.0
03A3:  BSF    03.7
03A4:  MOVF   00,W
03A5:  SUBLW  7E
03A6:  BTFSS  03.0
03A7:  GOTO   3C6
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
03A8:  MOVF   38,W
03A9:  MOVWF  7A
03AA:  MOVF   37,W
03AB:  MOVWF  04
03AC:  BCF    03.7
03AD:  BTFSC  7A.0
03AE:  BSF    03.7
03AF:  MOVLW  53
03B0:  SUBWF  00,W
03B1:  MOVWF  45
03B2:  MOVWF  46
03B3:  MOVLW  05
03B4:  MOVWF  47
03B5:  CALL   215
03B6:  MOVF   78,W
03B7:  MOVWF  44
03B8:  MOVWF  78
03B9:  MOVLW  05
03BA:  MOVWF  77
03BB:  MOVLW  3F
03BC:  MOVWF  04
03BD:  BCF    03.7
03BE:  MOVF   78,W
03BF:  CALL   10A
03C0:  MOVWF  00
03C1:  INCF   78,F
03C2:  INCF   04,F
03C3:  DECFSZ 77,F
03C4:  GOTO   3BE
03C5:  GOTO   3CB
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
03C6:  CLRF   3F
03C7:  CLRF   40
03C8:  CLRF   41
03C9:  CLRF   42
03CA:  CLRF   43
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
03CB:  MOVF   38,W
03CC:  MOVWF  7A
03CD:  MOVF   37,W
03CE:  MOVWF  04
03CF:  BCF    03.7
03D0:  BTFSC  7A.0
03D1:  BSF    03.7
03D2:  MOVF   00,W
03D3:  XORLW  0A
03D4:  BTFSC  03.2
03D5:  GOTO   3DA
03D6:  XORLW  07
03D7:  BTFSC  03.2
03D8:  GOTO   3E3
03D9:  GOTO   3E5
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
03DA:  MOVLW  07
03DB:  MOVWF  46
03DC:  MOVF   39,W
03DD:  MOVWF  47
03DE:  CALL   215
03DF:  MOVLW  01
03E0:  ADDWF  78,W
03E1:  ADDWF  36,F
....................             continue; 
03E2:  GOTO   43A
....................          case '\r': 
....................             x = 0; 
03E3:  CLRF   35
....................             continue; 
03E4:  GOTO   43A
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
03E5:  MOVLW  05
03E6:  MOVWF  46
03E7:  MOVF   39,W
03E8:  MOVWF  47
03E9:  CALL   215
03EA:  MOVF   78,W
03EB:  ADDWF  35,W
03EC:  SUBLW  7F
03ED:  BTFSC  03.0
03EE:  GOTO   3F8
....................       { 
....................          x = 0;                           // Set x at far left position 
03EF:  CLRF   35
....................          y += 7*size + 1;                 // Set y at next position down 
03F0:  MOVLW  07
03F1:  MOVWF  46
03F2:  MOVF   39,W
03F3:  MOVWF  47
03F4:  CALL   215
03F5:  MOVLW  01
03F6:  ADDWF  78,W
03F7:  ADDWF  36,F
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
03F8:  CLRF   3B
03F9:  MOVF   3B,W
03FA:  SUBLW  04
03FB:  BTFSS  03.0
03FC:  GOTO   43A
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
03FD:  CLRF   3C
03FE:  MOVF   3C,W
03FF:  SUBLW  06
0400:  BTFSS  03.0
0401:  GOTO   436
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
0402:  MOVLW  3F
0403:  ADDWF  3B,W
0404:  MOVWF  04
0405:  BCF    03.7
0406:  MOVF   00,W
0407:  MOVWF  44
0408:  MOVWF  77
0409:  MOVF   3C,W
040A:  MOVWF  78
040B:  BTFSC  03.2
040C:  GOTO   411
040D:  BCF    03.0
040E:  RRF    77,F
040F:  DECFSZ 78,F
0410:  GOTO   40D
0411:  BTFSS  77.0
0412:  GOTO   434
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
0413:  CLRF   3D
0414:  MOVF   39,W
0415:  SUBWF  3D,W
0416:  BTFSC  03.0
0417:  GOTO   434
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
0418:  CLRF   3E
0419:  MOVF   39,W
041A:  SUBWF  3E,W
041B:  BTFSC  03.0
041C:  GOTO   432
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
041D:  MOVF   3E,W
041E:  ADDWF  35,W
041F:  MOVWF  44
0420:  MOVF   3C,W
0421:  MOVWF  46
0422:  MOVF   39,W
0423:  MOVWF  47
0424:  CALL   215
0425:  MOVF   78,W
0426:  ADDWF  36,W
0427:  ADDWF  3D,W
0428:  MOVWF  45
0429:  MOVF   44,W
042A:  MOVWF  51
042B:  MOVF   45,W
042C:  MOVWF  52
042D:  MOVF   3A,W
042E:  MOVWF  53
042F:  CALL   2F4
0430:  INCF   3E,F
0431:  GOTO   419
....................                   } 
0432:  INCF   3D,F
0433:  GOTO   414
....................                } 
....................             } 
0434:  INCF   3C,F
0435:  GOTO   3FE
....................          } 
0436:  INCF   3B,F
0437:  MOVF   39,W
0438:  ADDWF  35,F
0439:  GOTO   3F9
....................       } 
043A:  INCF   37,F
043B:  BTFSC  03.2
043C:  INCF   38,F
043D:  INCF   35,F
043E:  GOTO   36A
....................    } 
043F:  RETURN
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... char yazi1[]="NURULLAH";//char türünden yazi1 adýnda bir boyutu belirsiz bir dizi tanýmlanmýþtýr ve içine NURULLAH stringi koyulmuþtur 
*
080C:  MOVLW  4E
080D:  BCF    03.5
080E:  MOVWF  21
080F:  MOVLW  55
0810:  MOVWF  22
0811:  MOVLW  52
0812:  MOVWF  23
0813:  MOVLW  55
0814:  MOVWF  24
0815:  MOVLW  4C
0816:  MOVWF  25
0817:  MOVWF  26
0818:  MOVLW  41
0819:  MOVWF  27
081A:  MOVLW  48
081B:  MOVWF  28
081C:  CLRF   29
.................... char yazi2[]="SAHIN";//char türünden yazi2 adýnda bir boyutu belirsiz bir dizi tanýmlanmýþtýr ve içine SAHIN stringi koyulmuþtur 
081D:  MOVLW  53
081E:  MOVWF  2A
081F:  MOVLW  41
0820:  MOVWF  2B
0821:  MOVLW  48
0822:  MOVWF  2C
0823:  MOVLW  49
0824:  MOVWF  2D
0825:  MOVLW  4E
0826:  MOVWF  2E
0827:  CLRF   2F
.................... int i,x1,y1,x2,y2;//int cinsinden 5 tane deðiþken tanýmlanmýþ 
....................  
.................... void main()//ana fonksiyon 
*
0800:  MOVLW  FF
0801:  MOVWF  20
0802:  BSF    03.5
0803:  BSF    1F.0
0804:  BSF    1F.1
0805:  BSF    1F.2
0806:  BCF    1F.3
0807:  MOVLW  07
0808:  MOVWF  1C
0809:  BCF    03.7
080A:  MOVLW  1F
080B:  ANDWF  03,F
.................... { 
....................    
....................     
....................    glcd_init(ON);//grafik lcd yi hazýrlama ve ekraný tamzleme  
*
0828:  MOVLW  01
0829:  MOVWF  35
082A:  BCF    0A.3
082B:  CALL   23A
082C:  BSF    0A.3
....................     
....................    while(TRUE)//sonsuz döngü 
....................    { 
....................       glcd_init(ON);//ekraný temizlenme 
082D:  MOVLW  01
082E:  MOVWF  35
082F:  BCF    0A.3
0830:  CALL   23A
0831:  BSF    0A.3
....................       glcd_text57(25,5,yazi1,2,ON);//25'e 5 kordinatlarýndan baþlayarak size=2 boyutunda yazi1 stringini ekrana pixelleri açarak(ON) yazdýrdýk 
0832:  MOVLW  19
0833:  MOVWF  35
0834:  MOVLW  05
0835:  MOVWF  36
0836:  CLRF   38
0837:  MOVLW  21
0838:  MOVWF  37
0839:  MOVLW  02
083A:  MOVWF  39
083B:  MOVLW  01
083C:  MOVWF  3A
083D:  BCF    0A.3
083E:  CALL   36A
083F:  BSF    0A.3
....................       glcd_text57(25,30,yazi2,2,ON);//25'e 30 kordinatlarýndan baþlayarak size=2 boyutunda yazi2 stringini ekrana pixelleri açarak(ON) yazdýrdýk 
0840:  MOVLW  19
0841:  MOVWF  35
0842:  MOVLW  1E
0843:  MOVWF  36
0844:  CLRF   38
0845:  MOVLW  2A
0846:  MOVWF  37
0847:  MOVLW  02
0848:  MOVWF  39
0849:  MOVLW  01
084A:  MOVWF  3A
084B:  BCF    0A.3
084C:  CALL   36A
084D:  BSF    0A.3
....................       delay_ms(2000);//2 sn bekle 
084E:  MOVLW  08
084F:  MOVWF  35
0850:  MOVLW  FA
0851:  MOVWF  36
0852:  BCF    0A.3
0853:  CALL   440
0854:  BSF    0A.3
0855:  DECFSZ 35,F
0856:  GOTO   050
....................        
....................       glcd_init(ON);//ekraný tamizle 
0857:  MOVLW  01
0858:  MOVWF  35
0859:  BCF    0A.3
085A:  CALL   23A
085B:  BSF    0A.3
....................       x1=5; 
085C:  MOVLW  05
085D:  MOVWF  31
....................       y1=5; 
085E:  MOVWF  32
....................       x2=100; 
085F:  MOVLW  64
0860:  MOVWF  33
....................       y2=5; 
0861:  MOVLW  05
0862:  MOVWF  34
....................  
....................       for(i=0;i<6;i++){//i 6ya eþit olana kadar döngüdeki iþlemleri gerçekleþtir 
0863:  CLRF   30
0864:  MOVF   30,W
0865:  SUBLW  05
0866:  BTFSS  03.0
0867:  GOTO   082
....................       glcd_line(x1,y1,x2,y2,ON);//grafik lcdye çizgi(line) çiz x1'e y1 kordinatýndan baþlayarak x2,y2 kordinatlarýna kadar pixelleri açarak (ON) 
0868:  MOVF   31,W
0869:  MOVWF  41
086A:  MOVF   32,W
086B:  MOVWF  42
086C:  MOVF   33,W
086D:  MOVWF  43
086E:  MOVF   34,W
086F:  MOVWF  44
0870:  MOVLW  01
0871:  MOVWF  45
0872:  BCF    0A.3
0873:  CALL   454
0874:  BSF    0A.3
....................       y2=y1+=10;//y2=y1=y1+10 
0875:  MOVLW  0A
0876:  ADDWF  32,F
0877:  MOVF   32,W
0878:  MOVWF  34
....................       x2-=10;//x2=x2-10 
0879:  MOVLW  0A
087A:  SUBWF  33,F
....................       delay_ms(100);//100 ms bekle 
087B:  MOVLW  64
087C:  MOVWF  36
087D:  BCF    0A.3
087E:  CALL   440
087F:  BSF    0A.3
0880:  INCF   30,F
0881:  GOTO   064
....................       } 
....................       glcd_init(ON);//ekraný temizle 
0882:  MOVLW  01
0883:  MOVWF  35
0884:  BCF    0A.3
0885:  CALL   23A
0886:  BSF    0A.3
....................       x1=y1=10; 
0887:  MOVLW  0A
0888:  MOVWF  32
0889:  MOVWF  31
....................  
....................       for(i=0;i<120;i++){ 
088A:  CLRF   30
088B:  MOVF   30,W
088C:  SUBLW  77
088D:  BTFSS  03.0
088E:  GOTO   0A2
....................       glcd_pixel(x1,y1,ON);//ekrandaverilen (x1,y1) kordinatlarýndaki pixelleri aç(ON) 
088F:  MOVF   31,W
0890:  MOVWF  51
0891:  MOVF   32,W
0892:  MOVWF  52
0893:  MOVLW  01
0894:  MOVWF  53
0895:  BCF    0A.3
0896:  CALL   2F4
0897:  BSF    0A.3
....................       y1=x1++;//y1=x1+1; 
0898:  MOVF   31,W
0899:  INCF   31,F
089A:  MOVWF  32
....................       delay_ms(50);//50ms bekle 
089B:  MOVLW  32
089C:  MOVWF  36
089D:  BCF    0A.3
089E:  CALL   440
089F:  BSF    0A.3
08A0:  INCF   30,F
08A1:  GOTO   08B
....................       } 
....................        
....................       glcd_init(ON);//ekraný temizle 
08A2:  MOVLW  01
08A3:  MOVWF  35
08A4:  BCF    0A.3
08A5:  CALL   23A
08A6:  BSF    0A.3
....................       y2=60; 
08A7:  MOVLW  3C
08A8:  MOVWF  34
....................       x1=5; 
08A9:  MOVLW  05
08AA:  MOVWF  31
....................  
....................       for(i=0;i<8;i++){ 
08AB:  CLRF   30
08AC:  MOVF   30,W
08AD:  SUBLW  07
08AE:  BTFSS  03.0
08AF:  GOTO   0CD
....................          glcd_bar(x1,0,x1,y2,10,ON);//ekrana çubuklar çiz (x1,0) arasý ilk nokta (x1,y2) ikinci nokta 10 çubuðun geniþliði pixeller açýlacak(ON) 
08B0:  MOVF   31,W
08B1:  MOVWF  35
08B2:  CLRF   36
08B3:  MOVF   31,W
08B4:  MOVWF  37
08B5:  MOVF   34,W
08B6:  MOVWF  38
08B7:  MOVLW  0A
08B8:  MOVWF  39
08B9:  MOVLW  01
08BA:  MOVWF  3A
08BB:  BCF    0A.3
08BC:  GOTO   538
08BD:  BSF    0A.3
....................          delay_ms(500); 
08BE:  MOVLW  02
08BF:  MOVWF  35
08C0:  MOVLW  FA
08C1:  MOVWF  36
08C2:  BCF    0A.3
08C3:  CALL   440
08C4:  BSF    0A.3
08C5:  DECFSZ 35,F
08C6:  GOTO   0C0
....................          x1+=15; 
08C7:  MOVLW  0F
08C8:  ADDWF  31,F
....................          y2-=5; 
08C9:  MOVLW  05
08CA:  SUBWF  34,F
08CB:  INCF   30,F
08CC:  GOTO   0AC
....................       } 
....................        
....................       glcd_init(ON);//ekraný temizle 
08CD:  MOVLW  01
08CE:  MOVWF  35
08CF:  BCF    0A.3
08D0:  CALL   23A
08D1:  BSF    0A.3
....................  
....................       for(i=0;i<=30;i=i+=5){ 
08D2:  CLRF   30
08D3:  MOVF   30,W
08D4:  SUBLW  1E
08D5:  BTFSS  03.0
08D6:  GOTO   0EF
....................          glcd_circle(60,30,i, NO,ON);//belirlenen merkezde belirlenen çapta daire çizer (60,30) kordinatlarý daire merkezi 'i' yarý çap 'NO'(dairenin içi boyansýnmý yes te alabilir) 'ON'(daire çizgisi siyah NO beyaz) 
08D7:  MOVLW  3C
08D8:  MOVWF  35
08D9:  MOVLW  1E
08DA:  MOVWF  36
08DB:  MOVF   30,W
08DC:  MOVWF  37
08DD:  CLRF   38
08DE:  MOVLW  01
08DF:  MOVWF  39
08E0:  BCF    0A.3
08E1:  GOTO   699
08E2:  BSF    0A.3
....................          delay_ms(500); 
08E3:  MOVLW  02
08E4:  MOVWF  35
08E5:  MOVLW  FA
08E6:  MOVWF  36
08E7:  BCF    0A.3
08E8:  CALL   440
08E9:  BSF    0A.3
08EA:  DECFSZ 35,F
08EB:  GOTO   0E5
08EC:  MOVLW  05
08ED:  ADDWF  30,F
08EE:  GOTO   0D3
....................       } 
....................       glcd_init(ON);//ekraný temizle 
08EF:  MOVLW  01
08F0:  MOVWF  35
08F1:  BCF    0A.3
08F2:  CALL   23A
08F3:  BSF    0A.3
....................       x1=5; 
08F4:  MOVLW  05
08F5:  MOVWF  31
....................       y1=5; 
08F6:  MOVWF  32
....................       x2=120; 
08F7:  MOVLW  78
08F8:  MOVWF  33
....................       y2=63; 
08F9:  MOVLW  3F
08FA:  MOVWF  34
....................  
....................      for(i=0;i<12;i++){ 
08FB:  CLRF   30
08FC:  MOVF   30,W
08FD:  SUBLW  0B
08FE:  BTFSS  03.0
08FF:  GOTO   120
....................      glcd_rect(x1,y1,x1,y2,NO,ON);//belirlenen konularda belirlenen büyüklükte dörtgen çizer (x1,y1)dörtgenin ilk köþe konumu (x2,y2)dörtgenin ikinci köþe konumu 'NO'(içi boyansýnmý(YES) te ala bilir) 'ON'(kenar çizgiler siyah(NO) beyaz) 
0900:  MOVF   31,W
0901:  MOVWF  35
0902:  MOVF   32,W
0903:  MOVWF  36
0904:  MOVF   31,W
0905:  MOVWF  37
0906:  MOVF   34,W
0907:  MOVWF  38
0908:  CLRF   39
0909:  MOVLW  01
090A:  MOVWF  3A
090B:  BCF    0A.3
090C:  GOTO   791
090D:  BSF    0A.3
....................      y1=x1+=5; 
090E:  MOVLW  05
090F:  ADDWF  31,F
0910:  MOVF   31,W
0911:  MOVWF  32
....................      x2-=5; 
0912:  MOVLW  05
0913:  SUBWF  33,F
....................      y2-=5; 
0914:  SUBWF  34,F
....................      delay_ms(500); 
0915:  MOVLW  02
0916:  MOVWF  35
0917:  MOVLW  FA
0918:  MOVWF  36
0919:  BCF    0A.3
091A:  CALL   440
091B:  BSF    0A.3
091C:  DECFSZ 35,F
091D:  GOTO   117
091E:  INCF   30,F
091F:  GOTO   0FC
....................      } 
0920:  GOTO   02D
....................    
....................    } 
....................  
.................... }   
0921:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
